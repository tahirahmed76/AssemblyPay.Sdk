/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing FeesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FeesApiTests : IDisposable
    {
        private FeesApi instance;

        public FeesApiTests()
        {
            instance = new FeesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FeesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FeesApi
            //Assert.IsType<FeesApi>(instance);
        }

        /// <summary>
        /// Test CreateFee
        /// </summary>
        [Fact]
        public void CreateFeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FeeRequestBody feeRequestBody = null;
            //var response = instance.CreateFee(feeRequestBody);
            //Assert.IsType<SingleFee>(response);
        }

        /// <summary>
        /// Test ListFees
        /// </summary>
        [Fact]
        public void ListFeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListFees(limit, offset);
            //Assert.IsType<Fees>(response);
        }

        /// <summary>
        /// Test ShowFee
        /// </summary>
        [Fact]
        public void ShowFeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int itemAmount = null;
            //var response = instance.ShowFee(id, itemAmount);
            //Assert.IsType<SingleFee>(response);
        }
    }
}
