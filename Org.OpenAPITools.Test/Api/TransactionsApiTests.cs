/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Xunit;
using AssemblyPay.Sdk.Api;
// uncomment below to import models
//using AssemblyPay.Sdk.Model;

namespace AssemblyPay.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionsApiTests : IDisposable
    {
        private TransactionsApi instance;

        public TransactionsApiTests()
        {
            instance = new TransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransactionsApi
            //Assert.IsType<TransactionsApi>(instance);
        }

        /// <summary>
        /// Test ListTransactions
        /// </summary>
        [Fact]
        public void ListTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //string accountId = null;
            //string itemId = null;
            //string transactionType = null;
            //string transactionTypeMethod = null;
            //string direction = null;
            //string userId = null;
            //string createdBefore = null;
            //string createdAfter = null;
            //var response = instance.ListTransactions(limit, offset, accountId, itemId, transactionType, transactionTypeMethod, direction, userId, createdBefore, createdAfter);
            //Assert.IsType<Transactions>(response);
        }

        /// <summary>
        /// Test ShowTransaction
        /// </summary>
        [Fact]
        public void ShowTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransaction(id);
            //Assert.IsType<SingleTransaction>(response);
        }

        /// <summary>
        /// Test ShowTransactionBankAccount
        /// </summary>
        [Fact]
        public void ShowTransactionBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransactionBankAccount(id);
            //Assert.IsType<BankAccount>(response);
        }

        /// <summary>
        /// Test ShowTransactionCardAccount
        /// </summary>
        [Fact]
        public void ShowTransactionCardAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransactionCardAccount(id);
            //Assert.IsType<CardAccount>(response);
        }

        /// <summary>
        /// Test ShowTransactionFees
        /// </summary>
        [Fact]
        public void ShowTransactionFeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransactionFees(id);
            //Assert.IsType<Fees>(response);
        }

        /// <summary>
        /// Test ShowTransactionUser
        /// </summary>
        [Fact]
        public void ShowTransactionUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransactionUser(id);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test ShowTransactionWalletAccount
        /// </summary>
        [Fact]
        public void ShowTransactionWalletAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowTransactionWalletAccount(id);
            //Assert.IsType<WalletAccount>(response);
        }
    }
}
