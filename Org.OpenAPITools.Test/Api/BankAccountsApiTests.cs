/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Xunit;
using AssemblyPay.Sdk.Api;
// uncomment below to import models
//using AssemblyPay.Sdk.Model;

namespace AssemblyPay.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing BankAccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BankAccountsApiTests : IDisposable
    {
        private BankAccountsApi instance;

        public BankAccountsApiTests()
        {
            instance = new BankAccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BankAccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BankAccountsApi
            //Assert.IsType<BankAccountsApi>(instance);
        }

        /// <summary>
        /// Test CreateBankAccount
        /// </summary>
        [Fact]
        public void CreateBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BankAccountRequestBody bankAccountRequestBody = null;
            //var response = instance.CreateBankAccount(bankAccountRequestBody);
            //Assert.IsType<BankAccount>(response);
        }

        /// <summary>
        /// Test RedactBankAccount
        /// </summary>
        [Fact]
        public void RedactBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.RedactBankAccount(id);
            //Assert.IsType<BankAccountDeletion>(response);
        }

        /// <summary>
        /// Test SendPennyAmount
        /// </summary>
        [Fact]
        public void SendPennyAmountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.SendPennyAmount(id);
            //Assert.IsType<BankAccount>(response);
        }

        /// <summary>
        /// Test ShowBankAccount
        /// </summary>
        [Fact]
        public void ShowBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowBankAccount(id);
            //Assert.IsType<BankAccount>(response);
        }

        /// <summary>
        /// Test ShowBankAccountUser
        /// </summary>
        [Fact]
        public void ShowBankAccountUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowBankAccountUser(id);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test ValidateRoutingNumber
        /// </summary>
        [Fact]
        public void ValidateRoutingNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string routingNumber = null;
            //var response = instance.ValidateRoutingNumber(routingNumber);
            //Assert.IsType<SingleRoutingNumber>(response);
        }

        /// <summary>
        /// Test VerifyPennyAmount
        /// </summary>
        [Fact]
        public void VerifyPennyAmountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PennyVerifyRequestBody pennyVerifyRequestBody = null;
            //var response = instance.VerifyPennyAmount(id, pennyVerifyRequestBody);
            //Assert.IsType<BankAccount>(response);
        }
    }
}
