/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRequestBody userRequestBody = null;
            //var response = instance.CreateUser(userRequestBody);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test ListUserBPayAccounts
        /// </summary>
        [Fact]
        public void ListUserBPayAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ListUserBPayAccounts(id);
            //Assert.IsType<ListBpayAccounts>(response);
        }

        /// <summary>
        /// Test ListUserItems
        /// </summary>
        [Fact]
        public void ListUserItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListUserItems(id, offset, limit);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Fact]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string search = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ListUsers(search, limit, offset);
            //Assert.IsType<Users>(response);
        }

        /// <summary>
        /// Test SetUserDisbursementAccount
        /// </summary>
        [Fact]
        public void SetUserDisbursementAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BankAccountIdRequestBody bankAccountIdRequestBody = null;
            //var response = instance.SetUserDisbursementAccount(id, bankAccountIdRequestBody);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test ShowUser
        /// </summary>
        [Fact]
        public void ShowUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowUser(id);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test ShowUserBankAccount
        /// </summary>
        [Fact]
        public void ShowUserBankAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowUserBankAccount(id);
            //Assert.IsType<BankAccount>(response);
        }

        /// <summary>
        /// Test ShowUserCardAccount
        /// </summary>
        [Fact]
        public void ShowUserCardAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowUserCardAccount(id);
            //Assert.IsType<CardAccount>(response);
        }

        /// <summary>
        /// Test ShowUserWalletAccounts
        /// </summary>
        [Fact]
        public void ShowUserWalletAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ShowUserWalletAccounts(id);
            //Assert.IsType<WalletAccount>(response);
        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateUserRequestBody updateUserRequestBody = null;
            //var response = instance.UpdateUser(id, updateUserRequestBody);
            //Assert.IsType<SingleUser>(response);
        }

        /// <summary>
        /// Test VerifyUser
        /// </summary>
        [Fact]
        public void VerifyUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.VerifyUser(id);
            //Assert.IsType<SingleUser>(response);
        }
    }
}
