/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using AssemblyPay.Sdk.Client;
using AssemblyPay.Sdk.Model;

namespace AssemblyPay.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Card Account
        /// </summary>
        /// <remarks>
        /// Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <returns>CardAccount</returns>
        CardAccount CreateCardAccount(CardAccountRequestBody cardAccountRequestBody);

        /// <summary>
        /// Create Card Account
        /// </summary>
        /// <remarks>
        /// Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <returns>ApiResponse of CardAccount</returns>
        ApiResponse<CardAccount> CreateCardAccountWithHttpInfo(CardAccountRequestBody cardAccountRequestBody);
        /// <summary>
        /// Redact Card Account
        /// </summary>
        /// <remarks>
        /// Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <returns>CardAccountDeletion</returns>
        CardAccountDeletion RedactCardAccount(string id);

        /// <summary>
        /// Redact Card Account
        /// </summary>
        /// <remarks>
        /// Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <returns>ApiResponse of CardAccountDeletion</returns>
        ApiResponse<CardAccountDeletion> RedactCardAccountWithHttpInfo(string id);
        /// <summary>
        /// Show Card Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>CardAccount</returns>
        CardAccount ShowCardAccount(string id);

        /// <summary>
        /// Show Card Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>ApiResponse of CardAccount</returns>
        ApiResponse<CardAccount> ShowCardAccountWithHttpInfo(string id);
        /// <summary>
        /// Show Card Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>SingleUser</returns>
        SingleUser ShowCardAccountUser(string id);

        /// <summary>
        /// Show Card Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>ApiResponse of SingleUser</returns>
        ApiResponse<SingleUser> ShowCardAccountUserWithHttpInfo(string id);
        /// <summary>
        /// Verify Card
        /// </summary>
        /// <remarks>
        /// Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <returns>CardAccount</returns>
        CardAccount VerifyCard(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody));

        /// <summary>
        /// Verify Card
        /// </summary>
        /// <remarks>
        /// Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <returns>ApiResponse of CardAccount</returns>
        ApiResponse<CardAccount> VerifyCardWithHttpInfo(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Card Account
        /// </summary>
        /// <remarks>
        /// Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        System.Threading.Tasks.Task<CardAccount> CreateCardAccountAsync(CardAccountRequestBody cardAccountRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Card Account
        /// </summary>
        /// <remarks>
        /// Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardAccount>> CreateCardAccountWithHttpInfoAsync(CardAccountRequestBody cardAccountRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redact Card Account
        /// </summary>
        /// <remarks>
        /// Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccountDeletion</returns>
        System.Threading.Tasks.Task<CardAccountDeletion> RedactCardAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redact Card Account
        /// </summary>
        /// <remarks>
        /// Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccountDeletion)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardAccountDeletion>> RedactCardAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Card Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        System.Threading.Tasks.Task<CardAccount> ShowCardAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Card Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardAccount>> ShowCardAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Card Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUser</returns>
        System.Threading.Tasks.Task<SingleUser> ShowCardAccountUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Card Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUser>> ShowCardAccountUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Card
        /// </summary>
        /// <remarks>
        /// Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        System.Threading.Tasks.Task<CardAccount> VerifyCardAsync(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Card
        /// </summary>
        /// <remarks>
        /// Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardAccount>> VerifyCardWithHttpInfoAsync(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardAccountsApi : ICardAccountsApiSync, ICardAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardAccountsApi : ICardAccountsApi
    {
        private AssemblyPay.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardAccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardAccountsApi(string basePath)
        {
            this.Configuration = AssemblyPay.Sdk.Client.Configuration.MergeConfigurations(
                AssemblyPay.Sdk.Client.GlobalConfiguration.Instance,
                new AssemblyPay.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardAccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardAccountsApi(AssemblyPay.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AssemblyPay.Sdk.Client.Configuration.MergeConfigurations(
                AssemblyPay.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardAccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CardAccountsApi(AssemblyPay.Sdk.Client.ISynchronousClient client, AssemblyPay.Sdk.Client.IAsynchronousClient asyncClient, AssemblyPay.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AssemblyPay.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AssemblyPay.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AssemblyPay.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AssemblyPay.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Card Account Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <returns>CardAccount</returns>
        public CardAccount CreateCardAccount(CardAccountRequestBody cardAccountRequestBody)
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = CreateCardAccountWithHttpInfo(cardAccountRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Card Account Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <returns>ApiResponse of CardAccount</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<CardAccount> CreateCardAccountWithHttpInfo(CardAccountRequestBody cardAccountRequestBody)
        {
            // verify the required parameter 'cardAccountRequestBody' is set
            if (cardAccountRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'cardAccountRequestBody' when calling CardAccountsApi->CreateCardAccount");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cardAccountRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CardAccount>("/card_accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Card Account Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        public async System.Threading.Tasks.Task<CardAccount> CreateCardAccountAsync(CardAccountRequestBody cardAccountRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = await CreateCardAccountWithHttpInfoAsync(cardAccountRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Card Account Create a Credit **Card Account** to be used as a funding source. Store the returned &#x60;:id&#x60; and use it for a &#x60;make_payment&#x60; **Item Action** call. The &#x60;:id&#x60; is also referred to as a **token** when involving Credit Cards. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardAccountRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<CardAccount>> CreateCardAccountWithHttpInfoAsync(CardAccountRequestBody cardAccountRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardAccountRequestBody' is set
            if (cardAccountRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'cardAccountRequestBody' when calling CardAccountsApi->CreateCardAccount");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cardAccountRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CardAccount>("/card_accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redact Card Account Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <returns>CardAccountDeletion</returns>
        public CardAccountDeletion RedactCardAccount(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccountDeletion> localVarResponse = RedactCardAccountWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redact Card Account Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <returns>ApiResponse of CardAccountDeletion</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<CardAccountDeletion> RedactCardAccountWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->RedactCardAccount");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CardAccountDeletion>("/card_accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redact Card Account Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccountDeletion</returns>
        public async System.Threading.Tasks.Task<CardAccountDeletion> RedactCardAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccountDeletion> localVarResponse = await RedactCardAccountWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redact Card Account Redact a Credit **Card Account** using a given &#x60;:id&#x60;. Redacted Credit **Card Accounts** can no longer be used as a funding source. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the card account to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccountDeletion)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<CardAccountDeletion>> RedactCardAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->RedactCardAccount");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CardAccountDeletion>("/card_accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedactCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Card Account Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>CardAccount</returns>
        public CardAccount ShowCardAccount(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = ShowCardAccountWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Card Account Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>ApiResponse of CardAccount</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<CardAccount> ShowCardAccountWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->ShowCardAccount");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CardAccount>("/card_accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Card Account Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        public async System.Threading.Tasks.Task<CardAccount> ShowCardAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = await ShowCardAccountWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Card Account Show details of a specific Credit **Card Account** using a given &#x60;:id&#x60;. You can toggle the card account number display to show the first 6 digits in addition to the last 4 digits. Contact Assembly if you want to toggle the card account display. 
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<CardAccount>> ShowCardAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->ShowCardAccount");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CardAccount>("/card_accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCardAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Card Account User Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>SingleUser</returns>
        public SingleUser ShowCardAccountUser(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleUser> localVarResponse = ShowCardAccountUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Card Account User Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <returns>ApiResponse of SingleUser</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<SingleUser> ShowCardAccountUserWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->ShowCardAccountUser");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleUser>("/card_accounts/{id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCardAccountUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Card Account User Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUser</returns>
        public async System.Threading.Tasks.Task<SingleUser> ShowCardAccountUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleUser> localVarResponse = await ShowCardAccountUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Card Account User Show the **User** the Credit **Card Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUser)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<SingleUser>> ShowCardAccountUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->ShowCardAccountUser");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleUser>("/card_accounts/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCardAccountUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Card Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <returns>CardAccount</returns>
        public CardAccount VerifyCard(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody))
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = VerifyCardWithHttpInfo(id, cardAccountVerifyRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Card Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <returns>ApiResponse of CardAccount</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<CardAccount> VerifyCardWithHttpInfo(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->VerifyCard");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cardAccountVerifyRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CardAccount>("/card_accounts/{id}/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Card Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardAccount</returns>
        public async System.Threading.Tasks.Task<CardAccount> VerifyCardAsync(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<CardAccount> localVarResponse = await VerifyCardWithHttpInfoAsync(id, cardAccountVerifyRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Card Where pre-authorization is enabled on a platform, verifies a **Card Account** when a **Card Account** is successfully verified, its verification status is &#x60;verified&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Card account ID</param>
        /// <param name="cardAccountVerifyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardAccount)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<CardAccount>> VerifyCardWithHttpInfoAsync(string id, CardAccountVerifyRequestBody cardAccountVerifyRequestBody = default(CardAccountVerifyRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CardAccountsApi->VerifyCard");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cardAccountVerifyRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CardAccount>("/card_accounts/{id}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
