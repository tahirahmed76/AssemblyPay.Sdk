/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using AssemblyPay.Sdk.Client;
using AssemblyPay.Sdk.Model;

namespace AssemblyPay.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pay a Bill
        /// </summary>
        /// <remarks>
        /// Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <returns>SingleDisbursement</returns>
        SingleDisbursement BillPayment(string id, BillPaymentRequestBody billPaymentRequestBody);

        /// <summary>
        /// Pay a Bill
        /// </summary>
        /// <remarks>
        /// Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <returns>ApiResponse of SingleDisbursement</returns>
        ApiResponse<SingleDisbursement> BillPaymentWithHttpInfo(string id, BillPaymentRequestBody billPaymentRequestBody);
        /// <summary>
        /// Show Wallet Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccount</returns>
        WalletAccount ShowWalletAccount(string id);

        /// <summary>
        /// Show Wallet Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccount</returns>
        ApiResponse<WalletAccount> ShowWalletAccountWithHttpInfo(string id);
        /// <summary>
        /// Show Wallet Account BPAY Details
        /// </summary>
        /// <remarks>
        /// Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccountBpayDetails</returns>
        WalletAccountBpayDetails ShowWalletAccountNBPAYDetails(string id);

        /// <summary>
        /// Show Wallet Account BPAY Details
        /// </summary>
        /// <remarks>
        /// Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccountBpayDetails</returns>
        ApiResponse<WalletAccountBpayDetails> ShowWalletAccountNBPAYDetailsWithHttpInfo(string id);
        /// <summary>
        /// Show Wallet Account NPP Details
        /// </summary>
        /// <remarks>
        /// Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccountNppDetails</returns>
        WalletAccountNppDetails ShowWalletAccountNPPDetails(string id);

        /// <summary>
        /// Show Wallet Account NPP Details
        /// </summary>
        /// <remarks>
        /// Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccountNppDetails</returns>
        ApiResponse<WalletAccountNppDetails> ShowWalletAccountNPPDetailsWithHttpInfo(string id);
        /// <summary>
        /// Show Wallet Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>SingleUser</returns>
        SingleUser ShowWalletAccountUser(string id);

        /// <summary>
        /// Show Wallet Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of SingleUser</returns>
        ApiResponse<SingleUser> ShowWalletAccountUserWithHttpInfo(string id);
        /// <summary>
        /// Withdraw Funds
        /// </summary>
        /// <remarks>
        /// Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <returns>SingleDisbursement</returns>
        SingleDisbursement WithdrawFunds(string id, WithdrawRequestBody withdrawRequestBody);

        /// <summary>
        /// Withdraw Funds
        /// </summary>
        /// <remarks>
        /// Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <returns>ApiResponse of SingleDisbursement</returns>
        ApiResponse<SingleDisbursement> WithdrawFundsWithHttpInfo(string id, WithdrawRequestBody withdrawRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Pay a Bill
        /// </summary>
        /// <remarks>
        /// Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleDisbursement</returns>
        System.Threading.Tasks.Task<SingleDisbursement> BillPaymentAsync(string id, BillPaymentRequestBody billPaymentRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pay a Bill
        /// </summary>
        /// <remarks>
        /// Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleDisbursement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleDisbursement>> BillPaymentWithHttpInfoAsync(string id, BillPaymentRequestBody billPaymentRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Wallet Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccount</returns>
        System.Threading.Tasks.Task<WalletAccount> ShowWalletAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Wallet Account
        /// </summary>
        /// <remarks>
        /// Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAccount>> ShowWalletAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Wallet Account BPAY Details
        /// </summary>
        /// <remarks>
        /// Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccountBpayDetails</returns>
        System.Threading.Tasks.Task<WalletAccountBpayDetails> ShowWalletAccountNBPAYDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Wallet Account BPAY Details
        /// </summary>
        /// <remarks>
        /// Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccountBpayDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAccountBpayDetails>> ShowWalletAccountNBPAYDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Wallet Account NPP Details
        /// </summary>
        /// <remarks>
        /// Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccountNppDetails</returns>
        System.Threading.Tasks.Task<WalletAccountNppDetails> ShowWalletAccountNPPDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Wallet Account NPP Details
        /// </summary>
        /// <remarks>
        /// Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccountNppDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAccountNppDetails>> ShowWalletAccountNPPDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Wallet Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUser</returns>
        System.Threading.Tasks.Task<SingleUser> ShowWalletAccountUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Wallet Account User
        /// </summary>
        /// <remarks>
        /// Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleUser>> ShowWalletAccountUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Withdraw Funds
        /// </summary>
        /// <remarks>
        /// Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleDisbursement</returns>
        System.Threading.Tasks.Task<SingleDisbursement> WithdrawFundsAsync(string id, WithdrawRequestBody withdrawRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Withdraw Funds
        /// </summary>
        /// <remarks>
        /// Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </remarks>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleDisbursement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleDisbursement>> WithdrawFundsWithHttpInfoAsync(string id, WithdrawRequestBody withdrawRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletAccountsApi : IWalletAccountsApiSync, IWalletAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletAccountsApi : IWalletAccountsApi
    {
        private AssemblyPay.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletAccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletAccountsApi(string basePath)
        {
            this.Configuration = AssemblyPay.Sdk.Client.Configuration.MergeConfigurations(
                AssemblyPay.Sdk.Client.GlobalConfiguration.Instance,
                new AssemblyPay.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletAccountsApi(AssemblyPay.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AssemblyPay.Sdk.Client.Configuration.MergeConfigurations(
                AssemblyPay.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AssemblyPay.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletAccountsApi(AssemblyPay.Sdk.Client.ISynchronousClient client, AssemblyPay.Sdk.Client.IAsynchronousClient asyncClient, AssemblyPay.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AssemblyPay.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AssemblyPay.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AssemblyPay.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AssemblyPay.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AssemblyPay.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Pay a Bill Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <returns>SingleDisbursement</returns>
        public SingleDisbursement BillPayment(string id, BillPaymentRequestBody billPaymentRequestBody)
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> localVarResponse = BillPaymentWithHttpInfo(id, billPaymentRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pay a Bill Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <returns>ApiResponse of SingleDisbursement</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> BillPaymentWithHttpInfo(string id, BillPaymentRequestBody billPaymentRequestBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->BillPayment");
            }

            // verify the required parameter 'billPaymentRequestBody' is set
            if (billPaymentRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'billPaymentRequestBody' when calling WalletAccountsApi->BillPayment");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = billPaymentRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SingleDisbursement>("/wallet_accounts/{id}/bill_payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pay a Bill Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleDisbursement</returns>
        public async System.Threading.Tasks.Task<SingleDisbursement> BillPaymentAsync(string id, BillPaymentRequestBody billPaymentRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> localVarResponse = await BillPaymentWithHttpInfoAsync(id, billPaymentRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pay a Bill Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="billPaymentRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleDisbursement)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement>> BillPaymentWithHttpInfoAsync(string id, BillPaymentRequestBody billPaymentRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->BillPayment");
            }

            // verify the required parameter 'billPaymentRequestBody' is set
            if (billPaymentRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'billPaymentRequestBody' when calling WalletAccountsApi->BillPayment");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = billPaymentRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SingleDisbursement>("/wallet_accounts/{id}/bill_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccount</returns>
        public WalletAccount ShowWalletAccount(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccount> localVarResponse = ShowWalletAccountWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccount</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<WalletAccount> ShowWalletAccountWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccount");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletAccount>("/wallet_accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccount</returns>
        public async System.Threading.Tasks.Task<WalletAccount> ShowWalletAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccount> localVarResponse = await ShowWalletAccountWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccount)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<WalletAccount>> ShowWalletAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccount");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletAccount>("/wallet_accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account BPAY Details Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccountBpayDetails</returns>
        public WalletAccountBpayDetails ShowWalletAccountNBPAYDetails(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccountBpayDetails> localVarResponse = ShowWalletAccountNBPAYDetailsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account BPAY Details Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccountBpayDetails</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<WalletAccountBpayDetails> ShowWalletAccountNBPAYDetailsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountNBPAYDetails");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletAccountBpayDetails>("/wallet_accounts/{id}/bpay_details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountNBPAYDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account BPAY Details Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccountBpayDetails</returns>
        public async System.Threading.Tasks.Task<WalletAccountBpayDetails> ShowWalletAccountNBPAYDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccountBpayDetails> localVarResponse = await ShowWalletAccountNBPAYDetailsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account BPAY Details Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccountBpayDetails)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<WalletAccountBpayDetails>> ShowWalletAccountNBPAYDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountNBPAYDetails");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletAccountBpayDetails>("/wallet_accounts/{id}/bpay_details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountNBPAYDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account NPP Details Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>WalletAccountNppDetails</returns>
        public WalletAccountNppDetails ShowWalletAccountNPPDetails(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccountNppDetails> localVarResponse = ShowWalletAccountNPPDetailsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account NPP Details Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of WalletAccountNppDetails</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<WalletAccountNppDetails> ShowWalletAccountNPPDetailsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountNPPDetails");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WalletAccountNppDetails>("/wallet_accounts/{id}/npp_details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountNPPDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account NPP Details Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletAccountNppDetails</returns>
        public async System.Threading.Tasks.Task<WalletAccountNppDetails> ShowWalletAccountNPPDetailsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<WalletAccountNppDetails> localVarResponse = await ShowWalletAccountNPPDetailsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account NPP Details Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletAccountNppDetails)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<WalletAccountNppDetails>> ShowWalletAccountNPPDetailsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountNPPDetails");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WalletAccountNppDetails>("/wallet_accounts/{id}/npp_details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountNPPDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account User Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>SingleUser</returns>
        public SingleUser ShowWalletAccountUser(string id)
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleUser> localVarResponse = ShowWalletAccountUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account User Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <returns>ApiResponse of SingleUser</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<SingleUser> ShowWalletAccountUserWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountUser");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleUser>("/wallet_accounts/{id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Wallet Account User Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleUser</returns>
        public async System.Threading.Tasks.Task<SingleUser> ShowWalletAccountUserAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleUser> localVarResponse = await ShowWalletAccountUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Wallet Account User Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleUser)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<SingleUser>> ShowWalletAccountUserWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->ShowWalletAccountUser");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleUser>("/wallet_accounts/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowWalletAccountUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw Funds Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <returns>SingleDisbursement</returns>
        public SingleDisbursement WithdrawFunds(string id, WithdrawRequestBody withdrawRequestBody)
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> localVarResponse = WithdrawFundsWithHttpInfo(id, withdrawRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw Funds Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <returns>ApiResponse of SingleDisbursement</returns>
        public AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> WithdrawFundsWithHttpInfo(string id, WithdrawRequestBody withdrawRequestBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->WithdrawFunds");
            }

            // verify the required parameter 'withdrawRequestBody' is set
            if (withdrawRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'withdrawRequestBody' when calling WalletAccountsApi->WithdrawFunds");
            }

            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = withdrawRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SingleDisbursement>("/wallet_accounts/{id}/withdraw", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawFunds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw Funds Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleDisbursement</returns>
        public async System.Threading.Tasks.Task<SingleDisbursement> WithdrawFundsAsync(string id, WithdrawRequestBody withdrawRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement> localVarResponse = await WithdrawFundsWithHttpInfoAsync(id, withdrawRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw Funds Withdraw funds from a **Wallet Account** to a specified disbursement account.
        /// </summary>
        /// <exception cref="AssemblyPay.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet account ID</param>
        /// <param name="withdrawRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleDisbursement)</returns>
        public async System.Threading.Tasks.Task<AssemblyPay.Sdk.Client.ApiResponse<SingleDisbursement>> WithdrawFundsWithHttpInfoAsync(string id, WithdrawRequestBody withdrawRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling WalletAccountsApi->WithdrawFunds");
            }

            // verify the required parameter 'withdrawRequestBody' is set
            if (withdrawRequestBody == null)
            {
                throw new AssemblyPay.Sdk.Client.ApiException(400, "Missing required parameter 'withdrawRequestBody' when calling WalletAccountsApi->WithdrawFunds");
            }


            AssemblyPay.Sdk.Client.RequestOptions localVarRequestOptions = new AssemblyPay.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AssemblyPay.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", AssemblyPay.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = withdrawRequestBody;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + AssemblyPay.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SingleDisbursement>("/wallet_accounts/{id}/withdraw", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WithdrawFunds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
