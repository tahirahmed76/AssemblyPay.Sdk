/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchTransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Batch Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <returns>ListBatchTransactions</returns>
        ListBatchTransactions ListBatchTransactions(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string));

        /// <summary>
        /// List Batch Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <returns>ApiResponse of ListBatchTransactions</returns>
        ApiResponse<ListBatchTransactions> ListBatchTransactionsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string));
        /// <summary>
        /// Show Batch Transaction
        /// </summary>
        /// <remarks>
        /// Get a batch transaction using its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <returns>SingleBatchTransaction</returns>
        SingleBatchTransaction ShowBatchTransaction(string id);

        /// <summary>
        /// Show Batch Transaction
        /// </summary>
        /// <remarks>
        /// Get a batch transaction using its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <returns>ApiResponse of SingleBatchTransaction</returns>
        ApiResponse<SingleBatchTransaction> ShowBatchTransactionWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchTransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Batch Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBatchTransactions</returns>
        System.Threading.Tasks.Task<ListBatchTransactions> ListBatchTransactionsAsync(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Batch Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBatchTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBatchTransactions>> ListBatchTransactionsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Batch Transaction
        /// </summary>
        /// <remarks>
        /// Get a batch transaction using its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleBatchTransaction</returns>
        System.Threading.Tasks.Task<SingleBatchTransaction> ShowBatchTransactionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Batch Transaction
        /// </summary>
        /// <remarks>
        /// Get a batch transaction using its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleBatchTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleBatchTransaction>> ShowBatchTransactionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchTransactionsApi : IBatchTransactionsApiSync, IBatchTransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchTransactionsApi : IBatchTransactionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchTransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchTransactionsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchTransactionsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchTransactionsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Batch Transactions Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <returns>ListBatchTransactions</returns>
        public ListBatchTransactions ListBatchTransactions(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<ListBatchTransactions> localVarResponse = ListBatchTransactionsWithHttpInfo(limit, offset, accountId, batchId, itemId, transactionType, transactionTypeMethod, direction, createdBefore, createdAfter, disbursementBank, processingBank);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Batch Transactions Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <returns>ApiResponse of ListBatchTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<ListBatchTransactions> ListBatchTransactionsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "batch_id", batchId));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "item_id", itemId));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }
            if (transactionTypeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type_method", transactionTypeMethod));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (disbursementBank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disbursement_bank", disbursementBank));
            }
            if (processingBank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "processing_bank", processingBank));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListBatchTransactions>("/batch_transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBatchTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Batch Transactions Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBatchTransactions</returns>
        public async System.Threading.Tasks.Task<ListBatchTransactions> ListBatchTransactionsAsync(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ListBatchTransactions> localVarResponse = await ListBatchTransactionsWithHttpInfoAsync(limit, offset, accountId, batchId, itemId, transactionType, transactionTypeMethod, direction, createdBefore, createdAfter, disbursementBank, processingBank, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Batch Transactions Retrieve an ordered and paginated list of existing **Batch Transactions**. The list can be filtered by **Account**, **Batch ID**, **Item**, and **Transaction Type**. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of records to retrieve. Up to 200. (optional, default to 10)</param>
        /// <param name="offset">Number of records to offset. Required for pagination. (optional, default to 0)</param>
        /// <param name="accountId">Bank, Card or Wallet Account ID. (optional)</param>
        /// <param name="batchId">Batch ID. This appears on a bank reference. (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="transactionType">The type of transaction. Options for querying are: payment, refund, disbursement, fee, deposit, withdrawal. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="transactionTypeMethod">The method the transaction was carried out with. Options for querying are: credit_card, npp, bpay, wire_transfer, wallet_account_transfer, misc. For returned values please refer here: [Enumeration Values](https://developer.assemblypayments.com/docs/enumeration-values) for the full list (optional)</param>
        /// <param name="direction">Direction of the transaction. Options are debit, credit (optional)</param>
        /// <param name="createdBefore">Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="createdAfter">Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z) (optional)</param>
        /// <param name="disbursementBank">The bank used for disbursing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="processingBank">The bank used for processing the payment. Please use a default value of &#x60;any&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBatchTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListBatchTransactions>> ListBatchTransactionsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string accountId = default(string), string batchId = default(string), string itemId = default(string), string transactionType = default(string), string transactionTypeMethod = default(string), string direction = default(string), string createdBefore = default(string), string createdAfter = default(string), string disbursementBank = default(string), string processingBank = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "batch_id", batchId));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "item_id", itemId));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }
            if (transactionTypeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "transaction_type_method", transactionTypeMethod));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (disbursementBank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disbursement_bank", disbursementBank));
            }
            if (processingBank != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "processing_bank", processingBank));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListBatchTransactions>("/batch_transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBatchTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Batch Transaction Get a batch transaction using its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <returns>SingleBatchTransaction</returns>
        public SingleBatchTransaction ShowBatchTransaction(string id)
        {
            Org.OpenAPITools.Client.ApiResponse<SingleBatchTransaction> localVarResponse = ShowBatchTransactionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Batch Transaction Get a batch transaction using its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <returns>ApiResponse of SingleBatchTransaction</returns>
        public Org.OpenAPITools.Client.ApiResponse<SingleBatchTransaction> ShowBatchTransactionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling BatchTransactionsApi->ShowBatchTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleBatchTransaction>("/batch_transactions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowBatchTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Batch Transaction Get a batch transaction using its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleBatchTransaction</returns>
        public async System.Threading.Tasks.Task<SingleBatchTransaction> ShowBatchTransactionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SingleBatchTransaction> localVarResponse = await ShowBatchTransactionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Batch Transaction Get a batch transaction using its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleBatchTransaction)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SingleBatchTransaction>> ShowBatchTransactionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling BatchTransactionsApi->ShowBatchTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleBatchTransaction>("/batch_transactions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowBatchTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
