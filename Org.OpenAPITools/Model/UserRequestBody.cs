/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserRequestBody
    /// </summary>
    [DataContract(Name = "user_requestBody")]
    public partial class UserRequestBody : IEquatable<UserRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRequestBody" /> class.
        /// </summary>
        /// <param name="id">Unique ID that can be generated by the platform. Cannot contain ’.’  character. Contact Assembly support if you want user IDs to be generated automatically. (required) (default to &quot;buyer-1556506027&quot;).</param>
        /// <param name="firstName">First name of the user (required) (default to &quot;Neol1556506027&quot;).</param>
        /// <param name="lastName">Last name of the user (required) (default to &quot;Calangi&quot;).</param>
        /// <param name="email">Email of the user. Unique to platform. (required) (default to &quot;neol.calangi+buyer1556506027@promisepay.com&quot;).</param>
        /// <param name="mobile">International number format. Include ’+’ and no spaces..</param>
        /// <param name="addressLine1">First line of the user address.</param>
        /// <param name="addressLine2">Second line of the user address.</param>
        /// <param name="state">State section of the user address.</param>
        /// <param name="city">City section of the user address.</param>
        /// <param name="zip">Postcode.</param>
        /// <param name="country">[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char) (required) (default to &quot;AUS&quot;).</param>
        /// <param name="dob">Date of Birth (DD/MM/YYYY)..</param>
        /// <param name="governmentNumber">Generic parameter to capture important user verification data. eg. SSN for US users, TFN for AU users..</param>
        /// <param name="driversLicenseNumber">Driving license number of the user.</param>
        /// <param name="driversLicenseState">State section of the user&#39;s driving license.</param>
        /// <param name="ipAddress">IP address.</param>
        /// <param name="logoUrl">URL link to the logo.</param>
        /// <param name="color1">Color code number 1.</param>
        /// <param name="color2">Color code number 2.</param>
        /// <param name="customDescriptor">When custom_descriptors are enabled, this is the information to appear on bundle direct debit statements (which show the buyer&#39;s custom_descriptor) as well as international wire payout, direct credit and PayPal payout statements (which show the seller&#39;s custom_descriptor).</param>
        public UserRequestBody(string id = "buyer-1556506027", string firstName = "Neol1556506027", string lastName = "Calangi", string email = "neol.calangi+buyer1556506027@promisepay.com", string mobile = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string state = default(string), string city = default(string), string zip = default(string), string country = "AUS", string dob = default(string), string governmentNumber = default(string), string driversLicenseNumber = default(string), string driversLicenseState = default(string), string ipAddress = default(string), string logoUrl = default(string), string color1 = default(string), string color2 = default(string), string customDescriptor = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for UserRequestBody and cannot be null");
            }
            this.Id = id;
            // to ensure "firstName" is required (not null)
            if (firstName == null) {
                throw new ArgumentNullException("firstName is a required property for UserRequestBody and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null) {
                throw new ArgumentNullException("lastName is a required property for UserRequestBody and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "email" is required (not null)
            if (email == null) {
                throw new ArgumentNullException("email is a required property for UserRequestBody and cannot be null");
            }
            this.Email = email;
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for UserRequestBody and cannot be null");
            }
            this.Country = country;
            this.Mobile = mobile;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.State = state;
            this.City = city;
            this.Zip = zip;
            this.Dob = dob;
            this.GovernmentNumber = governmentNumber;
            this.DriversLicenseNumber = driversLicenseNumber;
            this.DriversLicenseState = driversLicenseState;
            this.IpAddress = ipAddress;
            this.LogoUrl = logoUrl;
            this.Color1 = color1;
            this.Color2 = color2;
            this.CustomDescriptor = customDescriptor;
        }

        /// <summary>
        /// Unique ID that can be generated by the platform. Cannot contain ’.’  character. Contact Assembly support if you want user IDs to be generated automatically.
        /// </summary>
        /// <value>Unique ID that can be generated by the platform. Cannot contain ’.’  character. Contact Assembly support if you want user IDs to be generated automatically.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// First name of the user
        /// </summary>
        /// <value>First name of the user</value>
        [DataMember(Name = "first_name", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the user
        /// </summary>
        /// <value>Last name of the user</value>
        [DataMember(Name = "last_name", IsRequired = true, EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Email of the user. Unique to platform.
        /// </summary>
        /// <value>Email of the user. Unique to platform.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// International number format. Include ’+’ and no spaces.
        /// </summary>
        /// <value>International number format. Include ’+’ and no spaces.</value>
        [DataMember(Name = "mobile", EmitDefaultValue = false)]
        public string Mobile { get; set; }

        /// <summary>
        /// First line of the user address
        /// </summary>
        /// <value>First line of the user address</value>
        [DataMember(Name = "address_line1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Second line of the user address
        /// </summary>
        /// <value>Second line of the user address</value>
        [DataMember(Name = "address_line2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// State section of the user address
        /// </summary>
        /// <value>State section of the user address</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// City section of the user address
        /// </summary>
        /// <value>City section of the user address</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char)
        /// </summary>
        /// <value>[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char)</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Date of Birth (DD/MM/YYYY).
        /// </summary>
        /// <value>Date of Birth (DD/MM/YYYY).</value>
        [DataMember(Name = "dob", EmitDefaultValue = false)]
        public string Dob { get; set; }

        /// <summary>
        /// Generic parameter to capture important user verification data. eg. SSN for US users, TFN for AU users.
        /// </summary>
        /// <value>Generic parameter to capture important user verification data. eg. SSN for US users, TFN for AU users.</value>
        [DataMember(Name = "government_number", EmitDefaultValue = false)]
        public string GovernmentNumber { get; set; }

        /// <summary>
        /// Driving license number of the user
        /// </summary>
        /// <value>Driving license number of the user</value>
        [DataMember(Name = "drivers_license_number", EmitDefaultValue = false)]
        public string DriversLicenseNumber { get; set; }

        /// <summary>
        /// State section of the user&#39;s driving license
        /// </summary>
        /// <value>State section of the user&#39;s driving license</value>
        [DataMember(Name = "drivers_license_state", EmitDefaultValue = false)]
        public string DriversLicenseState { get; set; }

        /// <summary>
        /// IP address
        /// </summary>
        /// <value>IP address</value>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// URL link to the logo
        /// </summary>
        /// <value>URL link to the logo</value>
        [DataMember(Name = "logo_url", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Color code number 1
        /// </summary>
        /// <value>Color code number 1</value>
        [DataMember(Name = "color_1", EmitDefaultValue = false)]
        public string Color1 { get; set; }

        /// <summary>
        /// Color code number 2
        /// </summary>
        /// <value>Color code number 2</value>
        [DataMember(Name = "color_2", EmitDefaultValue = false)]
        public string Color2 { get; set; }

        /// <summary>
        /// When custom_descriptors are enabled, this is the information to appear on bundle direct debit statements (which show the buyer&#39;s custom_descriptor) as well as international wire payout, direct credit and PayPal payout statements (which show the seller&#39;s custom_descriptor)
        /// </summary>
        /// <value>When custom_descriptors are enabled, this is the information to appear on bundle direct debit statements (which show the buyer&#39;s custom_descriptor) as well as international wire payout, direct credit and PayPal payout statements (which show the seller&#39;s custom_descriptor)</value>
        [DataMember(Name = "custom_descriptor", EmitDefaultValue = false)]
        public string CustomDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserRequestBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  GovernmentNumber: ").Append(GovernmentNumber).Append("\n");
            sb.Append("  DriversLicenseNumber: ").Append(DriversLicenseNumber).Append("\n");
            sb.Append("  DriversLicenseState: ").Append(DriversLicenseState).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Color1: ").Append(Color1).Append("\n");
            sb.Append("  Color2: ").Append(Color2).Append("\n");
            sb.Append("  CustomDescriptor: ").Append(CustomDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRequestBody);
        }

        /// <summary>
        /// Returns true if UserRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.GovernmentNumber == input.GovernmentNumber ||
                    (this.GovernmentNumber != null &&
                    this.GovernmentNumber.Equals(input.GovernmentNumber))
                ) && 
                (
                    this.DriversLicenseNumber == input.DriversLicenseNumber ||
                    (this.DriversLicenseNumber != null &&
                    this.DriversLicenseNumber.Equals(input.DriversLicenseNumber))
                ) && 
                (
                    this.DriversLicenseState == input.DriversLicenseState ||
                    (this.DriversLicenseState != null &&
                    this.DriversLicenseState.Equals(input.DriversLicenseState))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Color1 == input.Color1 ||
                    (this.Color1 != null &&
                    this.Color1.Equals(input.Color1))
                ) && 
                (
                    this.Color2 == input.Color2 ||
                    (this.Color2 != null &&
                    this.Color2.Equals(input.Color2))
                ) && 
                (
                    this.CustomDescriptor == input.CustomDescriptor ||
                    (this.CustomDescriptor != null &&
                    this.CustomDescriptor.Equals(input.CustomDescriptor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Dob != null)
                {
                    hashCode = (hashCode * 59) + this.Dob.GetHashCode();
                }
                if (this.GovernmentNumber != null)
                {
                    hashCode = (hashCode * 59) + this.GovernmentNumber.GetHashCode();
                }
                if (this.DriversLicenseNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DriversLicenseNumber.GetHashCode();
                }
                if (this.DriversLicenseState != null)
                {
                    hashCode = (hashCode * 59) + this.DriversLicenseState.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.Color1 != null)
                {
                    hashCode = (hashCode * 59) + this.Color1.GetHashCode();
                }
                if (this.Color2 != null)
                {
                    hashCode = (hashCode * 59) + this.Color2.GetHashCode();
                }
                if (this.CustomDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDescriptor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
