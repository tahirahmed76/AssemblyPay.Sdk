/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// SingleRoutingNumberRoutingNumber
    /// </summary>
    [DataContract(Name = "single_routing_number_routing_number")]
    public partial class SingleRoutingNumberRoutingNumber : IEquatable<SingleRoutingNumberRoutingNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleRoutingNumberRoutingNumber" /> class.
        /// </summary>
        /// <param name="routingNumber">routingNumber.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="address">address.</param>
        /// <param name="city">city.</param>
        /// <param name="stateCode">stateCode.</param>
        /// <param name="zip">zip.</param>
        /// <param name="zipExtension">zipExtension.</param>
        /// <param name="phoneAreaCode">phoneAreaCode.</param>
        /// <param name="phonePrefix">phonePrefix.</param>
        /// <param name="phoneSuffix">phoneSuffix.</param>
        public SingleRoutingNumberRoutingNumber(string routingNumber = default(string), string customerName = default(string), string address = default(string), string city = default(string), string stateCode = default(string), string zip = default(string), string zipExtension = default(string), string phoneAreaCode = default(string), string phonePrefix = default(string), string phoneSuffix = default(string))
        {
            this.RoutingNumber = routingNumber;
            this.CustomerName = customerName;
            this.Address = address;
            this.City = city;
            this.StateCode = stateCode;
            this.Zip = zip;
            this.ZipExtension = zipExtension;
            this.PhoneAreaCode = phoneAreaCode;
            this.PhonePrefix = phonePrefix;
            this.PhoneSuffix = phoneSuffix;
        }

        /// <summary>
        /// Gets or Sets RoutingNumber
        /// </summary>
        [DataMember(Name = "routing_number", EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name = "customer_name", EmitDefaultValue = false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets StateCode
        /// </summary>
        [DataMember(Name = "state_code", EmitDefaultValue = false)]
        public string StateCode { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets ZipExtension
        /// </summary>
        [DataMember(Name = "zip_extension", EmitDefaultValue = false)]
        public string ZipExtension { get; set; }

        /// <summary>
        /// Gets or Sets PhoneAreaCode
        /// </summary>
        [DataMember(Name = "phone_area_code", EmitDefaultValue = false)]
        public string PhoneAreaCode { get; set; }

        /// <summary>
        /// Gets or Sets PhonePrefix
        /// </summary>
        [DataMember(Name = "phone_prefix", EmitDefaultValue = false)]
        public string PhonePrefix { get; set; }

        /// <summary>
        /// Gets or Sets PhoneSuffix
        /// </summary>
        [DataMember(Name = "phone_suffix", EmitDefaultValue = false)]
        public string PhoneSuffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SingleRoutingNumberRoutingNumber {\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  ZipExtension: ").Append(ZipExtension).Append("\n");
            sb.Append("  PhoneAreaCode: ").Append(PhoneAreaCode).Append("\n");
            sb.Append("  PhonePrefix: ").Append(PhonePrefix).Append("\n");
            sb.Append("  PhoneSuffix: ").Append(PhoneSuffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleRoutingNumberRoutingNumber);
        }

        /// <summary>
        /// Returns true if SingleRoutingNumberRoutingNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleRoutingNumberRoutingNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleRoutingNumberRoutingNumber input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateCode == input.StateCode ||
                    (this.StateCode != null &&
                    this.StateCode.Equals(input.StateCode))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.ZipExtension == input.ZipExtension ||
                    (this.ZipExtension != null &&
                    this.ZipExtension.Equals(input.ZipExtension))
                ) && 
                (
                    this.PhoneAreaCode == input.PhoneAreaCode ||
                    (this.PhoneAreaCode != null &&
                    this.PhoneAreaCode.Equals(input.PhoneAreaCode))
                ) && 
                (
                    this.PhonePrefix == input.PhonePrefix ||
                    (this.PhonePrefix != null &&
                    this.PhonePrefix.Equals(input.PhonePrefix))
                ) && 
                (
                    this.PhoneSuffix == input.PhoneSuffix ||
                    (this.PhoneSuffix != null &&
                    this.PhoneSuffix.Equals(input.PhoneSuffix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumber.GetHashCode();
                }
                if (this.CustomerName != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerName.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.StateCode != null)
                {
                    hashCode = (hashCode * 59) + this.StateCode.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.ZipExtension != null)
                {
                    hashCode = (hashCode * 59) + this.ZipExtension.GetHashCode();
                }
                if (this.PhoneAreaCode != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneAreaCode.GetHashCode();
                }
                if (this.PhonePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.PhonePrefix.GetHashCode();
                }
                if (this.PhoneSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneSuffix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
