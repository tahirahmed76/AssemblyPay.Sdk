/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// TokensRequestBody
    /// </summary>
    [DataContract(Name = "tokens_request_body")]
    public partial class TokensRequestBody : IEquatable<TokensRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokensRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokensRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokensRequestBody" /> class.
        /// </summary>
        /// <param name="grantType">This is a constant value of &#x60;client_credentials&#x60; (required) (default to &quot;client_credentials&quot;).</param>
        /// <param name="clientId">This value is supplied to you by Assembly Payments. (required) (default to &quot;10ajtntet1ccghuo8mv9ojglma&quot;).</param>
        /// <param name="clientSecret">This value is supplied to you by Assembly Payments. (required) (default to &quot;hto00nsjk6osurndceon4rsn2irhi8s4lurau5f797d0smb94l6&quot;).</param>
        /// <param name="scope">This value is supplied to you by Assembly Payments. (required) (default to &quot;im-au-04/cdbf9590-1db6-0139-ac4d-0a58a9feac03&quot;).</param>
        public TokensRequestBody(string grantType = "client_credentials", string clientId = "10ajtntet1ccghuo8mv9ojglma", string clientSecret = "hto00nsjk6osurndceon4rsn2irhi8s4lurau5f797d0smb94l6", string scope = "im-au-04/cdbf9590-1db6-0139-ac4d-0a58a9feac03")
        {
            // to ensure "grantType" is required (not null)
            if (grantType == null) {
                throw new ArgumentNullException("grantType is a required property for TokensRequestBody and cannot be null");
            }
            this.GrantType = grantType;
            // to ensure "clientId" is required (not null)
            if (clientId == null) {
                throw new ArgumentNullException("clientId is a required property for TokensRequestBody and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null) {
                throw new ArgumentNullException("clientSecret is a required property for TokensRequestBody and cannot be null");
            }
            this.ClientSecret = clientSecret;
            // to ensure "scope" is required (not null)
            if (scope == null) {
                throw new ArgumentNullException("scope is a required property for TokensRequestBody and cannot be null");
            }
            this.Scope = scope;
        }

        /// <summary>
        /// This is a constant value of &#x60;client_credentials&#x60;
        /// </summary>
        /// <value>This is a constant value of &#x60;client_credentials&#x60;</value>
        [DataMember(Name = "grant_type", IsRequired = true, EmitDefaultValue = false)]
        public string GrantType { get; set; }

        /// <summary>
        /// This value is supplied to you by Assembly Payments.
        /// </summary>
        /// <value>This value is supplied to you by Assembly Payments.</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// This value is supplied to you by Assembly Payments.
        /// </summary>
        /// <value>This value is supplied to you by Assembly Payments.</value>
        [DataMember(Name = "client_secret", IsRequired = true, EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// This value is supplied to you by Assembly Payments.
        /// </summary>
        /// <value>This value is supplied to you by Assembly Payments.</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokensRequestBody {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokensRequestBody);
        }

        /// <summary>
        /// Returns true if TokensRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of TokensRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokensRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GrantType == input.GrantType ||
                    (this.GrantType != null &&
                    this.GrantType.Equals(input.GrantType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GrantType != null)
                {
                    hashCode = (hashCode * 59) + this.GrantType.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
