/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletAccountNppDetailsNppDetailsMarketplacePayIds
    /// </summary>
    [DataContract(Name = "wallet_account_npp_details_npp_details_marketplace_pay_ids")]
    public partial class WalletAccountNppDetailsNppDetailsMarketplacePayIds : IEquatable<WalletAccountNppDetailsNppDetailsMarketplacePayIds>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Emal for value: emal
            /// </summary>
            [EnumMember(Value = "emal")]
            Emal = 1,

            /// <summary>
            /// Enum Aubn for value: aubn
            /// </summary>
            [EnumMember(Value = "aubn")]
            Aubn = 2,

            /// <summary>
            /// Enum Orgn for value: orgn
            /// </summary>
            [EnumMember(Value = "orgn")]
            Orgn = 3

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountNppDetailsNppDetailsMarketplacePayIds" /> class.
        /// </summary>
        /// <param name="payId">payId.</param>
        /// <param name="type">type.</param>
        public WalletAccountNppDetailsNppDetailsMarketplacePayIds(string payId = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.PayId = payId;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets PayId
        /// </summary>
        [DataMember(Name = "pay_id", EmitDefaultValue = false)]
        public string PayId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletAccountNppDetailsNppDetailsMarketplacePayIds {\n");
            sb.Append("  PayId: ").Append(PayId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletAccountNppDetailsNppDetailsMarketplacePayIds);
        }

        /// <summary>
        /// Returns true if WalletAccountNppDetailsNppDetailsMarketplacePayIds instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletAccountNppDetailsNppDetailsMarketplacePayIds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletAccountNppDetailsNppDetailsMarketplacePayIds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PayId == input.PayId ||
                    (this.PayId != null &&
                    this.PayId.Equals(input.PayId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayId != null)
                {
                    hashCode = (hashCode * 59) + this.PayId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
