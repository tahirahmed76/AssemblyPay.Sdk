/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchTransactionMarketplace
    /// </summary>
    [DataContract(Name = "batch_transaction_marketplace")]
    public partial class BatchTransactionMarketplace : IEquatable<BatchTransactionMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionMarketplace" /> class.
        /// </summary>
        /// <param name="groupName">groupName.</param>
        /// <param name="name">name.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="accountDetails">accountDetails.</param>
        /// <param name="accountDetailsEncrypted">accountDetailsEncrypted.</param>
        public BatchTransactionMarketplace(string groupName = default(string), string name = default(string), string shortName = default(string), Guid uuid = default(Guid), string accountDetails = default(string), bool accountDetailsEncrypted = default(bool))
        {
            this.GroupName = groupName;
            this.Name = name;
            this.ShortName = shortName;
            this.Uuid = uuid;
            this.AccountDetails = accountDetails;
            this.AccountDetailsEncrypted = accountDetailsEncrypted;
        }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "group_name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "short_name", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Gets or Sets AccountDetails
        /// </summary>
        [DataMember(Name = "account_details", EmitDefaultValue = false)]
        public string AccountDetails { get; set; }

        /// <summary>
        /// Gets or Sets AccountDetailsEncrypted
        /// </summary>
        [DataMember(Name = "account_details_encrypted", EmitDefaultValue = true)]
        public bool AccountDetailsEncrypted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTransactionMarketplace {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  AccountDetails: ").Append(AccountDetails).Append("\n");
            sb.Append("  AccountDetailsEncrypted: ").Append(AccountDetailsEncrypted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTransactionMarketplace);
        }

        /// <summary>
        /// Returns true if BatchTransactionMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTransactionMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTransactionMarketplace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.AccountDetails == input.AccountDetails ||
                    (this.AccountDetails != null &&
                    this.AccountDetails.Equals(input.AccountDetails))
                ) && 
                (
                    this.AccountDetailsEncrypted == input.AccountDetailsEncrypted ||
                    this.AccountDetailsEncrypted.Equals(input.AccountDetailsEncrypted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.AccountDetails != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountDetailsEncrypted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
