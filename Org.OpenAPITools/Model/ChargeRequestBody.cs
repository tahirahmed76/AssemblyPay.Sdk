/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChargeRequestBody
    /// </summary>
    [DataContract(Name = "charge_requestBody")]
    public partial class ChargeRequestBody : IEquatable<ChargeRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRequestBody" /> class.
        /// </summary>
        /// <param name="accountId">Bank Account or Card Account ID (required) (default to &quot;5ef44050-4c56-0137-abdf-0242ac110002&quot;).</param>
        /// <param name="name">Description of the Charge being created..</param>
        /// <param name="amount">The cost being charged in cents. (required).</param>
        /// <param name="email">Email of the user associated with the account being charged. (required) (default to &quot;buyer-1556505753@promisepay.com&quot;).</param>
        /// <param name="zip">Postcode (required).</param>
        /// <param name="country">[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code of the User being charged. (required) (default to &quot;AUS&quot;).</param>
        /// <param name="userId">The ID of the User.</param>
        /// <param name="feeIds">A comma separated list of fee IDs to apply.</param>
        /// <param name="currency">[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace..</param>
        /// <param name="retainAccount">True - Enables the account to be charged in the future. False - Redacts the account after this charge. .</param>
        /// <param name="deviceId">Device Information for the device initiating the payment.</param>
        /// <param name="ipAddress">IP Information for the device initiating the payment.</param>
        /// <param name="customDescriptor">When &#x60;custom_descriptors&#x60; are enabled, this is the information to appear on credit card and direct debit statements..</param>
        /// <param name="cvv">CVV / CVC.</param>
        public ChargeRequestBody(string accountId = "5ef44050-4c56-0137-abdf-0242ac110002", string name = default(string), int amount = default(int), string email = "buyer-1556505753@promisepay.com", int zip = default(int), string country = "AUS", string userId = default(string), string feeIds = default(string), string currency = default(string), bool retainAccount = default(bool), string deviceId = default(string), string ipAddress = default(string), string customDescriptor = default(string), string cvv = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null) {
                throw new ArgumentNullException("accountId is a required property for ChargeRequestBody and cannot be null");
            }
            this.AccountId = accountId;
            this.Amount = amount;
            // to ensure "email" is required (not null)
            if (email == null) {
                throw new ArgumentNullException("email is a required property for ChargeRequestBody and cannot be null");
            }
            this.Email = email;
            this.Zip = zip;
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for ChargeRequestBody and cannot be null");
            }
            this.Country = country;
            this.Name = name;
            this.UserId = userId;
            this.FeeIds = feeIds;
            this.Currency = currency;
            this.RetainAccount = retainAccount;
            this.DeviceId = deviceId;
            this.IpAddress = ipAddress;
            this.CustomDescriptor = customDescriptor;
            this.Cvv = cvv;
        }

        /// <summary>
        /// Bank Account or Card Account ID
        /// </summary>
        /// <value>Bank Account or Card Account ID</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Description of the Charge being created.
        /// </summary>
        /// <value>Description of the Charge being created.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The cost being charged in cents.
        /// </summary>
        /// <value>The cost being charged in cents.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Email of the user associated with the account being charged.
        /// </summary>
        /// <value>Email of the user associated with the account being charged.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name = "zip", IsRequired = true, EmitDefaultValue = false)]
        public int Zip { get; set; }

        /// <summary>
        /// [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code of the User being charged.
        /// </summary>
        /// <value>[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code of the User being charged.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The ID of the User
        /// </summary>
        /// <value>The ID of the User</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// A comma separated list of fee IDs to apply
        /// </summary>
        /// <value>A comma separated list of fee IDs to apply</value>
        [DataMember(Name = "fee_ids", EmitDefaultValue = false)]
        public string FeeIds { get; set; }

        /// <summary>
        /// [ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace.
        /// </summary>
        /// <value>[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// True - Enables the account to be charged in the future. False - Redacts the account after this charge. 
        /// </summary>
        /// <value>True - Enables the account to be charged in the future. False - Redacts the account after this charge. </value>
        [DataMember(Name = "retain_account", EmitDefaultValue = true)]
        public bool RetainAccount { get; set; }

        /// <summary>
        /// Device Information for the device initiating the payment
        /// </summary>
        /// <value>Device Information for the device initiating the payment</value>
        [DataMember(Name = "device_id", EmitDefaultValue = false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// IP Information for the device initiating the payment
        /// </summary>
        /// <value>IP Information for the device initiating the payment</value>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// When &#x60;custom_descriptors&#x60; are enabled, this is the information to appear on credit card and direct debit statements.
        /// </summary>
        /// <value>When &#x60;custom_descriptors&#x60; are enabled, this is the information to appear on credit card and direct debit statements.</value>
        [DataMember(Name = "custom_descriptor", EmitDefaultValue = false)]
        public string CustomDescriptor { get; set; }

        /// <summary>
        /// CVV / CVC
        /// </summary>
        /// <value>CVV / CVC</value>
        [DataMember(Name = "cvv", EmitDefaultValue = false)]
        public string Cvv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeRequestBody {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FeeIds: ").Append(FeeIds).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RetainAccount: ").Append(RetainAccount).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  CustomDescriptor: ").Append(CustomDescriptor).Append("\n");
            sb.Append("  Cvv: ").Append(Cvv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeRequestBody);
        }

        /// <summary>
        /// Returns true if ChargeRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Zip == input.Zip ||
                    this.Zip.Equals(input.Zip)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.FeeIds == input.FeeIds ||
                    (this.FeeIds != null &&
                    this.FeeIds.Equals(input.FeeIds))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RetainAccount == input.RetainAccount ||
                    this.RetainAccount.Equals(input.RetainAccount)
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.CustomDescriptor == input.CustomDescriptor ||
                    (this.CustomDescriptor != null &&
                    this.CustomDescriptor.Equals(input.CustomDescriptor))
                ) && 
                (
                    this.Cvv == input.Cvv ||
                    (this.Cvv != null &&
                    this.Cvv.Equals(input.Cvv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.FeeIds != null)
                {
                    hashCode = (hashCode * 59) + this.FeeIds.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RetainAccount.GetHashCode();
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.CustomDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDescriptor.GetHashCode();
                }
                if (this.Cvv != null)
                {
                    hashCode = (hashCode * 59) + this.Cvv.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
