/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// ReleasePaymentRequestBody
    /// </summary>
    [DataContract(Name = "release_payment_requestBody")]
    public partial class ReleasePaymentRequestBody : IEquatable<ReleasePaymentRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasePaymentRequestBody" /> class.
        /// </summary>
        /// <param name="releaseAmount">Partial amount to be released in cents.</param>
        /// <param name="flagRelease">to be used if release flagging enabled for your marketplace.</param>
        public ReleasePaymentRequestBody(int releaseAmount = default(int), bool flagRelease = default(bool))
        {
            this.ReleaseAmount = releaseAmount;
            this.FlagRelease = flagRelease;
        }

        /// <summary>
        /// Partial amount to be released in cents
        /// </summary>
        /// <value>Partial amount to be released in cents</value>
        [DataMember(Name = "release_amount", EmitDefaultValue = false)]
        public int ReleaseAmount { get; set; }

        /// <summary>
        /// to be used if release flagging enabled for your marketplace
        /// </summary>
        /// <value>to be used if release flagging enabled for your marketplace</value>
        [DataMember(Name = "flag_release", EmitDefaultValue = true)]
        public bool FlagRelease { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReleasePaymentRequestBody {\n");
            sb.Append("  ReleaseAmount: ").Append(ReleaseAmount).Append("\n");
            sb.Append("  FlagRelease: ").Append(FlagRelease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleasePaymentRequestBody);
        }

        /// <summary>
        /// Returns true if ReleasePaymentRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleasePaymentRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleasePaymentRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReleaseAmount == input.ReleaseAmount ||
                    this.ReleaseAmount.Equals(input.ReleaseAmount)
                ) && 
                (
                    this.FlagRelease == input.FlagRelease ||
                    this.FlagRelease.Equals(input.FlagRelease)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReleaseAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.FlagRelease.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
