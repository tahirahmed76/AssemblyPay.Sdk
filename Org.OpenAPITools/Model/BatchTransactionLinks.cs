/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// BatchTransactionLinks
    /// </summary>
    [DataContract(Name = "batch_transaction_links")]
    public partial class BatchTransactionLinks : IEquatable<BatchTransactionLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionLinks" /> class.
        /// </summary>
        /// <param name="self">self.</param>
        /// <param name="users">users.</param>
        /// <param name="fees">fees.</param>
        /// <param name="walletAccounts">walletAccounts.</param>
        /// <param name="cardAccounts">cardAccounts.</param>
        /// <param name="paypalAccounts">paypalAccounts.</param>
        /// <param name="bankAccounts">bankAccounts.</param>
        /// <param name="items">items.</param>
        /// <param name="marketplace">marketplace.</param>
        public BatchTransactionLinks(string self = default(string), string users = default(string), string fees = default(string), string walletAccounts = default(string), string cardAccounts = default(string), string paypalAccounts = default(string), string bankAccounts = default(string), string items = default(string), string marketplace = default(string))
        {
            this.Self = self;
            this.Users = users;
            this.Fees = fees;
            this.WalletAccounts = walletAccounts;
            this.CardAccounts = cardAccounts;
            this.PaypalAccounts = paypalAccounts;
            this.BankAccounts = bankAccounts;
            this.Items = items;
            this.Marketplace = marketplace;
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public string Users { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public string Fees { get; set; }

        /// <summary>
        /// Gets or Sets WalletAccounts
        /// </summary>
        [DataMember(Name = "wallet_accounts", EmitDefaultValue = false)]
        public string WalletAccounts { get; set; }

        /// <summary>
        /// Gets or Sets CardAccounts
        /// </summary>
        [DataMember(Name = "card_accounts", EmitDefaultValue = false)]
        public string CardAccounts { get; set; }

        /// <summary>
        /// Gets or Sets PaypalAccounts
        /// </summary>
        [DataMember(Name = "paypal_accounts", EmitDefaultValue = false)]
        public string PaypalAccounts { get; set; }

        /// <summary>
        /// Gets or Sets BankAccounts
        /// </summary>
        [DataMember(Name = "bank_accounts", EmitDefaultValue = false)]
        public string BankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public string Items { get; set; }

        /// <summary>
        /// Gets or Sets Marketplace
        /// </summary>
        [DataMember(Name = "marketplace", EmitDefaultValue = false)]
        public string Marketplace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTransactionLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  WalletAccounts: ").Append(WalletAccounts).Append("\n");
            sb.Append("  CardAccounts: ").Append(CardAccounts).Append("\n");
            sb.Append("  PaypalAccounts: ").Append(PaypalAccounts).Append("\n");
            sb.Append("  BankAccounts: ").Append(BankAccounts).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Marketplace: ").Append(Marketplace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTransactionLinks);
        }

        /// <summary>
        /// Returns true if BatchTransactionLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTransactionLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTransactionLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.WalletAccounts == input.WalletAccounts ||
                    (this.WalletAccounts != null &&
                    this.WalletAccounts.Equals(input.WalletAccounts))
                ) && 
                (
                    this.CardAccounts == input.CardAccounts ||
                    (this.CardAccounts != null &&
                    this.CardAccounts.Equals(input.CardAccounts))
                ) && 
                (
                    this.PaypalAccounts == input.PaypalAccounts ||
                    (this.PaypalAccounts != null &&
                    this.PaypalAccounts.Equals(input.PaypalAccounts))
                ) && 
                (
                    this.BankAccounts == input.BankAccounts ||
                    (this.BankAccounts != null &&
                    this.BankAccounts.Equals(input.BankAccounts))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Marketplace == input.Marketplace ||
                    (this.Marketplace != null &&
                    this.Marketplace.Equals(input.Marketplace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                if (this.WalletAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.WalletAccounts.GetHashCode();
                }
                if (this.CardAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.CardAccounts.GetHashCode();
                }
                if (this.PaypalAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.PaypalAccounts.GetHashCode();
                }
                if (this.BankAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccounts.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Marketplace != null)
                {
                    hashCode = (hashCode * 59) + this.Marketplace.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
