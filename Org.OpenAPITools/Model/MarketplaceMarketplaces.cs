/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// MarketplaceMarketplaces
    /// </summary>
    [DataContract(Name = "marketplace_marketplaces")]
    public partial class MarketplaceMarketplaces : IEquatable<MarketplaceMarketplaces>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceMarketplaces" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="name">name.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="color1">color1.</param>
        /// <param name="color2">color2.</param>
        /// <param name="color3">color3.</param>
        /// <param name="color4">color4.</param>
        /// <param name="color5">color5.</param>
        /// <param name="website">website.</param>
        /// <param name="paymentFrequency">paymentFrequency.</param>
        /// <param name="altMarketplaceId">altMarketplaceId.</param>
        /// <param name="state">state.</param>
        /// <param name="logo">logo.</param>
        /// <param name="active">active.</param>
        /// <param name="altMarketplaceAuth">altMarketplaceAuth.</param>
        /// <param name="businessInformation">businessInformation.</param>
        /// <param name="disableApproveLogo">disableApproveLogo.</param>
        /// <param name="enableVirtualTerminal">enableVirtualTerminal.</param>
        /// <param name="currency">currency.</param>
        /// <param name="email">email.</param>
        /// <param name="sellerWhiteLabeled">sellerWhiteLabeled.</param>
        /// <param name="partialRefunds">partialRefunds.</param>
        /// <param name="related">related.</param>
        /// <param name="links">links.</param>
        public MarketplaceMarketplaces(string id = default(string), string groupName = default(string), string name = default(string), string shortName = default(string), string color1 = default(string), string color2 = default(string), string color3 = default(string), string color4 = default(string), string color5 = default(string), string website = default(string), string paymentFrequency = default(string), string altMarketplaceId = default(string), string state = default(string), string logo = default(string), string active = default(string), string altMarketplaceAuth = default(string), MarketplaceMarketplacesBusinessInformation businessInformation = default(MarketplaceMarketplacesBusinessInformation), bool disableApproveLogo = default(bool), bool enableVirtualTerminal = default(bool), string currency = default(string), string email = default(string), bool sellerWhiteLabeled = default(bool), bool partialRefunds = default(bool), MarketplaceMarketplacesRelated related = default(MarketplaceMarketplacesRelated), MarketplaceMarketplacesLinks links = default(MarketplaceMarketplacesLinks))
        {
            this.Id = id;
            this.GroupName = groupName;
            this.Name = name;
            this.ShortName = shortName;
            this.Color1 = color1;
            this.Color2 = color2;
            this.Color3 = color3;
            this.Color4 = color4;
            this.Color5 = color5;
            this.Website = website;
            this.PaymentFrequency = paymentFrequency;
            this.AltMarketplaceId = altMarketplaceId;
            this.State = state;
            this.Logo = logo;
            this.Active = active;
            this.AltMarketplaceAuth = altMarketplaceAuth;
            this.BusinessInformation = businessInformation;
            this.DisableApproveLogo = disableApproveLogo;
            this.EnableVirtualTerminal = enableVirtualTerminal;
            this.Currency = currency;
            this.Email = email;
            this.SellerWhiteLabeled = sellerWhiteLabeled;
            this.PartialRefunds = partialRefunds;
            this.Related = related;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "group_name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "short_name", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Color1
        /// </summary>
        [DataMember(Name = "color_1", EmitDefaultValue = false)]
        public string Color1 { get; set; }

        /// <summary>
        /// Gets or Sets Color2
        /// </summary>
        [DataMember(Name = "color_2", EmitDefaultValue = false)]
        public string Color2 { get; set; }

        /// <summary>
        /// Gets or Sets Color3
        /// </summary>
        [DataMember(Name = "color_3", EmitDefaultValue = false)]
        public string Color3 { get; set; }

        /// <summary>
        /// Gets or Sets Color4
        /// </summary>
        [DataMember(Name = "color_4", EmitDefaultValue = false)]
        public string Color4 { get; set; }

        /// <summary>
        /// Gets or Sets Color5
        /// </summary>
        [DataMember(Name = "color_5", EmitDefaultValue = false)]
        public string Color5 { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets PaymentFrequency
        /// </summary>
        [DataMember(Name = "payment_frequency", EmitDefaultValue = false)]
        public string PaymentFrequency { get; set; }

        /// <summary>
        /// Gets or Sets AltMarketplaceId
        /// </summary>
        [DataMember(Name = "alt_marketplace_id", EmitDefaultValue = false)]
        public string AltMarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = false)]
        public string Active { get; set; }

        /// <summary>
        /// Gets or Sets AltMarketplaceAuth
        /// </summary>
        [DataMember(Name = "alt_marketplace_auth", EmitDefaultValue = false)]
        public string AltMarketplaceAuth { get; set; }

        /// <summary>
        /// Gets or Sets BusinessInformation
        /// </summary>
        [DataMember(Name = "business_information", EmitDefaultValue = false)]
        public MarketplaceMarketplacesBusinessInformation BusinessInformation { get; set; }

        /// <summary>
        /// Gets or Sets DisableApproveLogo
        /// </summary>
        [DataMember(Name = "disable_approve_logo", EmitDefaultValue = true)]
        public bool DisableApproveLogo { get; set; }

        /// <summary>
        /// Gets or Sets EnableVirtualTerminal
        /// </summary>
        [DataMember(Name = "enable_virtual_terminal", EmitDefaultValue = true)]
        public bool EnableVirtualTerminal { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets SellerWhiteLabeled
        /// </summary>
        [DataMember(Name = "seller_white_labeled", EmitDefaultValue = true)]
        public bool SellerWhiteLabeled { get; set; }

        /// <summary>
        /// Gets or Sets PartialRefunds
        /// </summary>
        [DataMember(Name = "partial_refunds", EmitDefaultValue = true)]
        public bool PartialRefunds { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name = "related", EmitDefaultValue = false)]
        public MarketplaceMarketplacesRelated Related { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public MarketplaceMarketplacesLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketplaceMarketplaces {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Color1: ").Append(Color1).Append("\n");
            sb.Append("  Color2: ").Append(Color2).Append("\n");
            sb.Append("  Color3: ").Append(Color3).Append("\n");
            sb.Append("  Color4: ").Append(Color4).Append("\n");
            sb.Append("  Color5: ").Append(Color5).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  AltMarketplaceId: ").Append(AltMarketplaceId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AltMarketplaceAuth: ").Append(AltMarketplaceAuth).Append("\n");
            sb.Append("  BusinessInformation: ").Append(BusinessInformation).Append("\n");
            sb.Append("  DisableApproveLogo: ").Append(DisableApproveLogo).Append("\n");
            sb.Append("  EnableVirtualTerminal: ").Append(EnableVirtualTerminal).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  SellerWhiteLabeled: ").Append(SellerWhiteLabeled).Append("\n");
            sb.Append("  PartialRefunds: ").Append(PartialRefunds).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketplaceMarketplaces);
        }

        /// <summary>
        /// Returns true if MarketplaceMarketplaces instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketplaceMarketplaces to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketplaceMarketplaces input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Color1 == input.Color1 ||
                    (this.Color1 != null &&
                    this.Color1.Equals(input.Color1))
                ) && 
                (
                    this.Color2 == input.Color2 ||
                    (this.Color2 != null &&
                    this.Color2.Equals(input.Color2))
                ) && 
                (
                    this.Color3 == input.Color3 ||
                    (this.Color3 != null &&
                    this.Color3.Equals(input.Color3))
                ) && 
                (
                    this.Color4 == input.Color4 ||
                    (this.Color4 != null &&
                    this.Color4.Equals(input.Color4))
                ) && 
                (
                    this.Color5 == input.Color5 ||
                    (this.Color5 != null &&
                    this.Color5.Equals(input.Color5))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.PaymentFrequency == input.PaymentFrequency ||
                    (this.PaymentFrequency != null &&
                    this.PaymentFrequency.Equals(input.PaymentFrequency))
                ) && 
                (
                    this.AltMarketplaceId == input.AltMarketplaceId ||
                    (this.AltMarketplaceId != null &&
                    this.AltMarketplaceId.Equals(input.AltMarketplaceId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AltMarketplaceAuth == input.AltMarketplaceAuth ||
                    (this.AltMarketplaceAuth != null &&
                    this.AltMarketplaceAuth.Equals(input.AltMarketplaceAuth))
                ) && 
                (
                    this.BusinessInformation == input.BusinessInformation ||
                    (this.BusinessInformation != null &&
                    this.BusinessInformation.Equals(input.BusinessInformation))
                ) && 
                (
                    this.DisableApproveLogo == input.DisableApproveLogo ||
                    this.DisableApproveLogo.Equals(input.DisableApproveLogo)
                ) && 
                (
                    this.EnableVirtualTerminal == input.EnableVirtualTerminal ||
                    this.EnableVirtualTerminal.Equals(input.EnableVirtualTerminal)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.SellerWhiteLabeled == input.SellerWhiteLabeled ||
                    this.SellerWhiteLabeled.Equals(input.SellerWhiteLabeled)
                ) && 
                (
                    this.PartialRefunds == input.PartialRefunds ||
                    this.PartialRefunds.Equals(input.PartialRefunds)
                ) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Color1 != null)
                {
                    hashCode = (hashCode * 59) + this.Color1.GetHashCode();
                }
                if (this.Color2 != null)
                {
                    hashCode = (hashCode * 59) + this.Color2.GetHashCode();
                }
                if (this.Color3 != null)
                {
                    hashCode = (hashCode * 59) + this.Color3.GetHashCode();
                }
                if (this.Color4 != null)
                {
                    hashCode = (hashCode * 59) + this.Color4.GetHashCode();
                }
                if (this.Color5 != null)
                {
                    hashCode = (hashCode * 59) + this.Color5.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.PaymentFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentFrequency.GetHashCode();
                }
                if (this.AltMarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.AltMarketplaceId.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.Active != null)
                {
                    hashCode = (hashCode * 59) + this.Active.GetHashCode();
                }
                if (this.AltMarketplaceAuth != null)
                {
                    hashCode = (hashCode * 59) + this.AltMarketplaceAuth.GetHashCode();
                }
                if (this.BusinessInformation != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessInformation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableApproveLogo.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableVirtualTerminal.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SellerWhiteLabeled.GetHashCode();
                hashCode = (hashCode * 59) + this.PartialRefunds.GetHashCode();
                if (this.Related != null)
                {
                    hashCode = (hashCode * 59) + this.Related.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
