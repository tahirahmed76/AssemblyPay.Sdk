/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchTransactionAddressCountry
    /// </summary>
    [DataContract(Name = "batch_transaction_address_country")]
    public partial class BatchTransactionAddressCountry : IEquatable<BatchTransactionAddressCountry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionAddressCountry" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="threeCode">threeCode.</param>
        /// <param name="twoCode">twoCode.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="numericCode">numericCode.</param>
        public BatchTransactionAddressCountry(string id = default(string), string name = default(string), string threeCode = default(string), string twoCode = default(string), string currencyId = default(string), string numericCode = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.ThreeCode = threeCode;
            this.TwoCode = twoCode;
            this.CurrencyId = currencyId;
            this.NumericCode = numericCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ThreeCode
        /// </summary>
        [DataMember(Name = "three_code", EmitDefaultValue = false)]
        public string ThreeCode { get; set; }

        /// <summary>
        /// Gets or Sets TwoCode
        /// </summary>
        [DataMember(Name = "two_code", EmitDefaultValue = false)]
        public string TwoCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currency_id", EmitDefaultValue = false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets NumericCode
        /// </summary>
        [DataMember(Name = "numeric_code", EmitDefaultValue = false)]
        public string NumericCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTransactionAddressCountry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ThreeCode: ").Append(ThreeCode).Append("\n");
            sb.Append("  TwoCode: ").Append(TwoCode).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  NumericCode: ").Append(NumericCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTransactionAddressCountry);
        }

        /// <summary>
        /// Returns true if BatchTransactionAddressCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTransactionAddressCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTransactionAddressCountry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ThreeCode == input.ThreeCode ||
                    (this.ThreeCode != null &&
                    this.ThreeCode.Equals(input.ThreeCode))
                ) && 
                (
                    this.TwoCode == input.TwoCode ||
                    (this.TwoCode != null &&
                    this.TwoCode.Equals(input.TwoCode))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.NumericCode == input.NumericCode ||
                    (this.NumericCode != null &&
                    this.NumericCode.Equals(input.NumericCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ThreeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeCode.GetHashCode();
                }
                if (this.TwoCode != null)
                {
                    hashCode = (hashCode * 59) + this.TwoCode.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.NumericCode != null)
                {
                    hashCode = (hashCode * 59) + this.NumericCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
