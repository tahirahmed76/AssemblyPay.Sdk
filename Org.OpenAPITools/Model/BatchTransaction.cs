/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// BatchTransaction
    /// </summary>
    [DataContract(Name = "batch_transaction")]
    public partial class BatchTransaction : IEquatable<BatchTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransaction" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="status">status.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="disbursementBank">disbursementBank.</param>
        /// <param name="processingBank">processingBank.</param>
        /// <param name="externalReference">externalReference.</param>
        /// <param name="referenceAmount">referenceAmount.</param>
        /// <param name="internalState">internalState.</param>
        /// <param name="internalStatus">internalStatus.</param>
        /// <param name="accountExternal">accountExternal.</param>
        /// <param name="externalAccountDetails">externalAccountDetails.</param>
        /// <param name="externalAccountDetailsEncrypted">externalAccountDetailsEncrypted.</param>
        /// <param name="marketplace">marketplace.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="userEmail">userEmail.</param>
        /// <param name="userExternalId">userExternalId.</param>
        /// <param name="legalEntityId">legalEntityId.</param>
        /// <param name="phone">phone.</param>
        /// <param name="payoutCurrency">payoutCurrency.</param>
        /// <param name="type">type.</param>
        /// <param name="typeMethod">typeMethod.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="cuscalPaymentTransactionId">cuscalPaymentTransactionId.</param>
        /// <param name="reference">reference.</param>
        /// <param name="state">state.</param>
        /// <param name="userId">userId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="fromUserName">fromUserName.</param>
        /// <param name="fromUserId">fromUserId.</param>
        /// <param name="refundState">refundState.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="company">company.</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressCity">addressCity.</param>
        /// <param name="addressState">addressState.</param>
        /// <param name="addressPostcode">addressPostcode.</param>
        /// <param name="addressCountry">addressCountry.</param>
        /// <param name="country">country.</param>
        /// <param name="debitCredit">debitCredit.</param>
        /// <param name="description">description.</param>
        /// <param name="item">item.</param>
        /// <param name="depositReference">depositReference.</param>
        /// <param name="related">related.</param>
        /// <param name="links">links.</param>
        public BatchTransaction(string id = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string status = default(string), string uuid = default(string), string disbursementBank = default(string), string processingBank = default(string), string externalReference = default(string), string referenceAmount = default(string), string internalState = default(string), string internalStatus = default(string), BatchTransactionAccountExternal accountExternal = default(BatchTransactionAccountExternal), string externalAccountDetails = default(string), bool externalAccountDetailsEncrypted = default(bool), BatchTransactionMarketplace marketplace = default(BatchTransactionMarketplace), string firstName = default(string), string lastName = default(string), string userEmail = default(string), string userExternalId = default(string), string legalEntityId = default(string), string phone = default(string), string payoutCurrency = default(string), string type = default(string), string typeMethod = default(string), int batchId = default(int), string cuscalPaymentTransactionId = default(string), string reference = default(string), string state = default(string), string userId = default(string), string accountId = default(string), string accountType = default(string), string fromUserName = default(string), string fromUserId = default(string), string refundState = default(string), int amount = default(int), string currency = default(string), string company = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressCity = default(string), string addressState = default(string), string addressPostcode = default(string), BatchTransactionAddressCountry addressCountry = default(BatchTransactionAddressCountry), string country = default(string), string debitCredit = default(string), string description = default(string), BatchTransactionItem item = default(BatchTransactionItem), string depositReference = default(string), BatchTransactionRelated related = default(BatchTransactionRelated), BatchTransactionLinks links = default(BatchTransactionLinks))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for BatchTransaction and cannot be null");
            }
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Amount = amount;
            this.Status = status;
            this.Uuid = uuid;
            this.DisbursementBank = disbursementBank;
            this.ProcessingBank = processingBank;
            this.ExternalReference = externalReference;
            this.ReferenceAmount = referenceAmount;
            this.InternalState = internalState;
            this.InternalStatus = internalStatus;
            this.AccountExternal = accountExternal;
            this.ExternalAccountDetails = externalAccountDetails;
            this.ExternalAccountDetailsEncrypted = externalAccountDetailsEncrypted;
            this.Marketplace = marketplace;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.UserEmail = userEmail;
            this.UserExternalId = userExternalId;
            this.LegalEntityId = legalEntityId;
            this.Phone = phone;
            this.PayoutCurrency = payoutCurrency;
            this.Type = type;
            this.TypeMethod = typeMethod;
            this.BatchId = batchId;
            this.CuscalPaymentTransactionId = cuscalPaymentTransactionId;
            this.Reference = reference;
            this.State = state;
            this.UserId = userId;
            this.AccountId = accountId;
            this.AccountType = accountType;
            this.FromUserName = fromUserName;
            this.FromUserId = fromUserId;
            this.RefundState = refundState;
            this.Currency = currency;
            this.Company = company;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressCity = addressCity;
            this.AddressState = addressState;
            this.AddressPostcode = addressPostcode;
            this.AddressCountry = addressCountry;
            this.Country = country;
            this.DebitCredit = debitCredit;
            this.Description = description;
            this.Item = item;
            this.DepositReference = depositReference;
            this.Related = related;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets DisbursementBank
        /// </summary>
        [DataMember(Name = "disbursement_bank", EmitDefaultValue = false)]
        public string DisbursementBank { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingBank
        /// </summary>
        [DataMember(Name = "processing_bank", EmitDefaultValue = false)]
        public string ProcessingBank { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReference
        /// </summary>
        [DataMember(Name = "external_reference", EmitDefaultValue = false)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceAmount
        /// </summary>
        [DataMember(Name = "reference_amount", EmitDefaultValue = false)]
        public string ReferenceAmount { get; set; }

        /// <summary>
        /// Gets or Sets InternalState
        /// </summary>
        [DataMember(Name = "internal_state", EmitDefaultValue = false)]
        public string InternalState { get; set; }

        /// <summary>
        /// Gets or Sets InternalStatus
        /// </summary>
        [DataMember(Name = "internal_status", EmitDefaultValue = false)]
        public string InternalStatus { get; set; }

        /// <summary>
        /// Gets or Sets AccountExternal
        /// </summary>
        [DataMember(Name = "account_external", EmitDefaultValue = false)]
        public BatchTransactionAccountExternal AccountExternal { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountDetails
        /// </summary>
        [DataMember(Name = "external_account_details", EmitDefaultValue = false)]
        public string ExternalAccountDetails { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountDetailsEncrypted
        /// </summary>
        [DataMember(Name = "external_account_details_encrypted", EmitDefaultValue = true)]
        public bool ExternalAccountDetailsEncrypted { get; set; }

        /// <summary>
        /// Gets or Sets Marketplace
        /// </summary>
        [DataMember(Name = "marketplace", EmitDefaultValue = false)]
        public BatchTransactionMarketplace Marketplace { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "user_email", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or Sets UserExternalId
        /// </summary>
        [DataMember(Name = "user_external_id", EmitDefaultValue = false)]
        public string UserExternalId { get; set; }

        /// <summary>
        /// Gets or Sets LegalEntityId
        /// </summary>
        [DataMember(Name = "legal_entity_id", EmitDefaultValue = false)]
        public string LegalEntityId { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PayoutCurrency
        /// </summary>
        [DataMember(Name = "payout_currency", EmitDefaultValue = false)]
        public string PayoutCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeMethod
        /// </summary>
        [DataMember(Name = "type_method", EmitDefaultValue = false)]
        public string TypeMethod { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public int BatchId { get; set; }

        /// <summary>
        /// Gets or Sets CuscalPaymentTransactionId
        /// </summary>
        [DataMember(Name = "cuscal_payment_transaction_id", EmitDefaultValue = false)]
        public string CuscalPaymentTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "account_type", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets FromUserName
        /// </summary>
        [DataMember(Name = "from_user_name", EmitDefaultValue = false)]
        public string FromUserName { get; set; }

        /// <summary>
        /// Gets or Sets FromUserId
        /// </summary>
        [DataMember(Name = "from_user_id", EmitDefaultValue = false)]
        public string FromUserId { get; set; }

        /// <summary>
        /// Gets or Sets RefundState
        /// </summary>
        [DataMember(Name = "refund_state", EmitDefaultValue = false)]
        public string RefundState { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "address_line1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "address_line2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name = "address_city", EmitDefaultValue = false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressState
        /// </summary>
        [DataMember(Name = "address_state", EmitDefaultValue = false)]
        public string AddressState { get; set; }

        /// <summary>
        /// Gets or Sets AddressPostcode
        /// </summary>
        [DataMember(Name = "address_postcode", EmitDefaultValue = false)]
        public string AddressPostcode { get; set; }

        /// <summary>
        /// Gets or Sets AddressCountry
        /// </summary>
        [DataMember(Name = "address_country", EmitDefaultValue = false)]
        public BatchTransactionAddressCountry AddressCountry { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets DebitCredit
        /// </summary>
        [DataMember(Name = "debit_credit", EmitDefaultValue = false)]
        public string DebitCredit { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name = "item", EmitDefaultValue = false)]
        public BatchTransactionItem Item { get; set; }

        /// <summary>
        /// Gets or Sets DepositReference
        /// </summary>
        [DataMember(Name = "deposit_reference", EmitDefaultValue = false)]
        public string DepositReference { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name = "related", EmitDefaultValue = false)]
        public BatchTransactionRelated Related { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public BatchTransactionLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  DisbursementBank: ").Append(DisbursementBank).Append("\n");
            sb.Append("  ProcessingBank: ").Append(ProcessingBank).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  ReferenceAmount: ").Append(ReferenceAmount).Append("\n");
            sb.Append("  InternalState: ").Append(InternalState).Append("\n");
            sb.Append("  InternalStatus: ").Append(InternalStatus).Append("\n");
            sb.Append("  AccountExternal: ").Append(AccountExternal).Append("\n");
            sb.Append("  ExternalAccountDetails: ").Append(ExternalAccountDetails).Append("\n");
            sb.Append("  ExternalAccountDetailsEncrypted: ").Append(ExternalAccountDetailsEncrypted).Append("\n");
            sb.Append("  Marketplace: ").Append(Marketplace).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserExternalId: ").Append(UserExternalId).Append("\n");
            sb.Append("  LegalEntityId: ").Append(LegalEntityId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PayoutCurrency: ").Append(PayoutCurrency).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeMethod: ").Append(TypeMethod).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CuscalPaymentTransactionId: ").Append(CuscalPaymentTransactionId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  FromUserName: ").Append(FromUserName).Append("\n");
            sb.Append("  FromUserId: ").Append(FromUserId).Append("\n");
            sb.Append("  RefundState: ").Append(RefundState).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressPostcode: ").Append(AddressPostcode).Append("\n");
            sb.Append("  AddressCountry: ").Append(AddressCountry).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DebitCredit: ").Append(DebitCredit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  DepositReference: ").Append(DepositReference).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTransaction);
        }

        /// <summary>
        /// Returns true if BatchTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.DisbursementBank == input.DisbursementBank ||
                    (this.DisbursementBank != null &&
                    this.DisbursementBank.Equals(input.DisbursementBank))
                ) && 
                (
                    this.ProcessingBank == input.ProcessingBank ||
                    (this.ProcessingBank != null &&
                    this.ProcessingBank.Equals(input.ProcessingBank))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.ReferenceAmount == input.ReferenceAmount ||
                    (this.ReferenceAmount != null &&
                    this.ReferenceAmount.Equals(input.ReferenceAmount))
                ) && 
                (
                    this.InternalState == input.InternalState ||
                    (this.InternalState != null &&
                    this.InternalState.Equals(input.InternalState))
                ) && 
                (
                    this.InternalStatus == input.InternalStatus ||
                    (this.InternalStatus != null &&
                    this.InternalStatus.Equals(input.InternalStatus))
                ) && 
                (
                    this.AccountExternal == input.AccountExternal ||
                    (this.AccountExternal != null &&
                    this.AccountExternal.Equals(input.AccountExternal))
                ) && 
                (
                    this.ExternalAccountDetails == input.ExternalAccountDetails ||
                    (this.ExternalAccountDetails != null &&
                    this.ExternalAccountDetails.Equals(input.ExternalAccountDetails))
                ) && 
                (
                    this.ExternalAccountDetailsEncrypted == input.ExternalAccountDetailsEncrypted ||
                    this.ExternalAccountDetailsEncrypted.Equals(input.ExternalAccountDetailsEncrypted)
                ) && 
                (
                    this.Marketplace == input.Marketplace ||
                    (this.Marketplace != null &&
                    this.Marketplace.Equals(input.Marketplace))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserExternalId == input.UserExternalId ||
                    (this.UserExternalId != null &&
                    this.UserExternalId.Equals(input.UserExternalId))
                ) && 
                (
                    this.LegalEntityId == input.LegalEntityId ||
                    (this.LegalEntityId != null &&
                    this.LegalEntityId.Equals(input.LegalEntityId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PayoutCurrency == input.PayoutCurrency ||
                    (this.PayoutCurrency != null &&
                    this.PayoutCurrency.Equals(input.PayoutCurrency))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeMethod == input.TypeMethod ||
                    (this.TypeMethod != null &&
                    this.TypeMethod.Equals(input.TypeMethod))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    this.BatchId.Equals(input.BatchId)
                ) && 
                (
                    this.CuscalPaymentTransactionId == input.CuscalPaymentTransactionId ||
                    (this.CuscalPaymentTransactionId != null &&
                    this.CuscalPaymentTransactionId.Equals(input.CuscalPaymentTransactionId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.FromUserName == input.FromUserName ||
                    (this.FromUserName != null &&
                    this.FromUserName.Equals(input.FromUserName))
                ) && 
                (
                    this.FromUserId == input.FromUserId ||
                    (this.FromUserId != null &&
                    this.FromUserId.Equals(input.FromUserId))
                ) && 
                (
                    this.RefundState == input.RefundState ||
                    (this.RefundState != null &&
                    this.RefundState.Equals(input.RefundState))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressPostcode == input.AddressPostcode ||
                    (this.AddressPostcode != null &&
                    this.AddressPostcode.Equals(input.AddressPostcode))
                ) && 
                (
                    this.AddressCountry == input.AddressCountry ||
                    (this.AddressCountry != null &&
                    this.AddressCountry.Equals(input.AddressCountry))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DebitCredit == input.DebitCredit ||
                    (this.DebitCredit != null &&
                    this.DebitCredit.Equals(input.DebitCredit))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.DepositReference == input.DepositReference ||
                    (this.DepositReference != null &&
                    this.DepositReference.Equals(input.DepositReference))
                ) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.DisbursementBank != null)
                {
                    hashCode = (hashCode * 59) + this.DisbursementBank.GetHashCode();
                }
                if (this.ProcessingBank != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessingBank.GetHashCode();
                }
                if (this.ExternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReference.GetHashCode();
                }
                if (this.ReferenceAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceAmount.GetHashCode();
                }
                if (this.InternalState != null)
                {
                    hashCode = (hashCode * 59) + this.InternalState.GetHashCode();
                }
                if (this.InternalStatus != null)
                {
                    hashCode = (hashCode * 59) + this.InternalStatus.GetHashCode();
                }
                if (this.AccountExternal != null)
                {
                    hashCode = (hashCode * 59) + this.AccountExternal.GetHashCode();
                }
                if (this.ExternalAccountDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalAccountDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExternalAccountDetailsEncrypted.GetHashCode();
                if (this.Marketplace != null)
                {
                    hashCode = (hashCode * 59) + this.Marketplace.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                if (this.UserExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.UserExternalId.GetHashCode();
                }
                if (this.LegalEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.LegalEntityId.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.PayoutCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutCurrency.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.TypeMethod != null)
                {
                    hashCode = (hashCode * 59) + this.TypeMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                if (this.CuscalPaymentTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.CuscalPaymentTransactionId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.FromUserName != null)
                {
                    hashCode = (hashCode * 59) + this.FromUserName.GetHashCode();
                }
                if (this.FromUserId != null)
                {
                    hashCode = (hashCode * 59) + this.FromUserId.GetHashCode();
                }
                if (this.RefundState != null)
                {
                    hashCode = (hashCode * 59) + this.RefundState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                if (this.AddressCity != null)
                {
                    hashCode = (hashCode * 59) + this.AddressCity.GetHashCode();
                }
                if (this.AddressState != null)
                {
                    hashCode = (hashCode * 59) + this.AddressState.GetHashCode();
                }
                if (this.AddressPostcode != null)
                {
                    hashCode = (hashCode * 59) + this.AddressPostcode.GetHashCode();
                }
                if (this.AddressCountry != null)
                {
                    hashCode = (hashCode * 59) + this.AddressCountry.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.DebitCredit != null)
                {
                    hashCode = (hashCode * 59) + this.DebitCredit.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Item != null)
                {
                    hashCode = (hashCode * 59) + this.Item.GetHashCode();
                }
                if (this.DepositReference != null)
                {
                    hashCode = (hashCode * 59) + this.DepositReference.GetHashCode();
                }
                if (this.Related != null)
                {
                    hashCode = (hashCode * 59) + this.Related.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
