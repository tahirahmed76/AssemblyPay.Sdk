/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankAccountRequestBody
    /// </summary>
    [DataContract(Name = "bank_account_requestBody")]
    public partial class BankAccountRequestBody : IEquatable<BankAccountRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Bank account type (savings or checking)
        /// </summary>
        /// <value>Bank account type (savings or checking)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum Savings for value: savings
            /// </summary>
            [EnumMember(Value = "savings")]
            Savings = 1,

            /// <summary>
            /// Enum Checking for value: checking
            /// </summary>
            [EnumMember(Value = "checking")]
            Checking = 2

        }


        /// <summary>
        /// Bank account type (savings or checking)
        /// </summary>
        /// <value>Bank account type (savings or checking)</value>
        [DataMember(Name = "account_type", IsRequired = true, EmitDefaultValue = false)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Holder type (personal or business)
        /// </summary>
        /// <value>Holder type (personal or business)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HolderTypeEnum
        {
            /// <summary>
            /// Enum Personal for value: personal
            /// </summary>
            [EnumMember(Value = "personal")]
            Personal = 1,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 2

        }


        /// <summary>
        /// Holder type (personal or business)
        /// </summary>
        /// <value>Holder type (personal or business)</value>
        [DataMember(Name = "holder_type", IsRequired = true, EmitDefaultValue = false)]
        public HolderTypeEnum HolderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankAccountRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountRequestBody" /> class.
        /// </summary>
        /// <param name="userId">User ID (required) (default to &quot;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&quot;).</param>
        /// <param name="bankName">Bank name (required) (default to &quot;Bank of Australia&quot;).</param>
        /// <param name="accountName">Account name (required) (default to &quot;Samuel Seller&quot;).</param>
        /// <param name="routingNumber">*Required conditionally* - Routing number / SWIFT code / BSB number. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats).  (required) (default to &quot;111123&quot;).</param>
        /// <param name="accountNumber">Account number / IBAN. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats).  (required) (default to &quot;111234&quot;).</param>
        /// <param name="accountType">Bank account type (savings or checking) (required) (default to AccountTypeEnum.Checking).</param>
        /// <param name="holderType">Holder type (personal or business) (required) (default to HolderTypeEnum.Personal).</param>
        /// <param name="country">[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char) (required) (default to &quot;AUS&quot;).</param>
        /// <param name="payoutCurrency">[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This parameter determines the currency with which funds are paid out..</param>
        /// <param name="currency">[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace..</param>
        public BankAccountRequestBody(string userId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", string bankName = "Bank of Australia", string accountName = "Samuel Seller", string routingNumber = "111123", string accountNumber = "111234", AccountTypeEnum accountType = AccountTypeEnum.Checking, HolderTypeEnum holderType = HolderTypeEnum.Personal, string country = "AUS", string payoutCurrency = default(string), string currency = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null) {
                throw new ArgumentNullException("userId is a required property for BankAccountRequestBody and cannot be null");
            }
            this.UserId = userId;
            // to ensure "bankName" is required (not null)
            if (bankName == null) {
                throw new ArgumentNullException("bankName is a required property for BankAccountRequestBody and cannot be null");
            }
            this.BankName = bankName;
            // to ensure "accountName" is required (not null)
            if (accountName == null) {
                throw new ArgumentNullException("accountName is a required property for BankAccountRequestBody and cannot be null");
            }
            this.AccountName = accountName;
            // to ensure "routingNumber" is required (not null)
            if (routingNumber == null) {
                throw new ArgumentNullException("routingNumber is a required property for BankAccountRequestBody and cannot be null");
            }
            this.RoutingNumber = routingNumber;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null) {
                throw new ArgumentNullException("accountNumber is a required property for BankAccountRequestBody and cannot be null");
            }
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.HolderType = holderType;
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for BankAccountRequestBody and cannot be null");
            }
            this.Country = country;
            this.PayoutCurrency = payoutCurrency;
            this.Currency = currency;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Bank name
        /// </summary>
        /// <value>Bank name</value>
        [DataMember(Name = "bank_name", IsRequired = true, EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Account name
        /// </summary>
        /// <value>Account name</value>
        [DataMember(Name = "account_name", IsRequired = true, EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// *Required conditionally* - Routing number / SWIFT code / BSB number. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats). 
        /// </summary>
        /// <value>*Required conditionally* - Routing number / SWIFT code / BSB number. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats). </value>
        [DataMember(Name = "routing_number", IsRequired = true, EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Account number / IBAN. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats). 
        /// </summary>
        /// <value>Account number / IBAN. See [Bank account formats by country](https://developer.assemblypayments.com/docs/input-formats). </value>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char)
        /// </summary>
        /// <value>[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char)</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// [ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This parameter determines the currency with which funds are paid out.
        /// </summary>
        /// <value>[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This parameter determines the currency with which funds are paid out.</value>
        [DataMember(Name = "payout_currency", EmitDefaultValue = false)]
        public string PayoutCurrency { get; set; }

        /// <summary>
        /// [ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace.
        /// </summary>
        /// <value>[ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccountRequestBody {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  HolderType: ").Append(HolderType).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PayoutCurrency: ").Append(PayoutCurrency).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountRequestBody);
        }

        /// <summary>
        /// Returns true if BankAccountRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.HolderType == input.HolderType ||
                    this.HolderType.Equals(input.HolderType)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PayoutCurrency == input.PayoutCurrency ||
                    (this.PayoutCurrency != null &&
                    this.PayoutCurrency.Equals(input.PayoutCurrency))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.RoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumber.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                hashCode = (hashCode * 59) + this.HolderType.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.PayoutCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutCurrency.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 3.", new [] { "Country" });
            }

            yield break;
        }
    }

}
