/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyPay.Sdk.Client.OpenAPIDateConverter;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract(Name = "item")]
    public partial class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum PaymentRequired for value: payment_required
            /// </summary>
            [EnumMember(Value = "payment_required")]
            PaymentRequired = 2,

            /// <summary>
            /// Enum WirePending for value: wire_pending
            /// </summary>
            [EnumMember(Value = "wire_pending")]
            WirePending = 3,

            /// <summary>
            /// Enum PaymentPending for value: payment_pending
            /// </summary>
            [EnumMember(Value = "payment_pending")]
            PaymentPending = 4,

            /// <summary>
            /// Enum PaymentHeld for value: payment_held
            /// </summary>
            [EnumMember(Value = "payment_held")]
            PaymentHeld = 5,

            /// <summary>
            /// Enum PaymentAuthorized for value: payment_authorized
            /// </summary>
            [EnumMember(Value = "payment_authorized")]
            PaymentAuthorized = 6,

            /// <summary>
            /// Enum Voided for value: voided
            /// </summary>
            [EnumMember(Value = "voided")]
            Voided = 7,

            /// <summary>
            /// Enum FraudHold for value: fraud_hold
            /// </summary>
            [EnumMember(Value = "fraud_hold")]
            FraudHold = 8,

            /// <summary>
            /// Enum PaymentDeposited for value: payment_deposited
            /// </summary>
            [EnumMember(Value = "payment_deposited")]
            PaymentDeposited = 9,

            /// <summary>
            /// Enum WorkCompleted for value: work_completed
            /// </summary>
            [EnumMember(Value = "work_completed")]
            WorkCompleted = 10,

            /// <summary>
            /// Enum ProblemFlagged for value: problem_flagged
            /// </summary>
            [EnumMember(Value = "problem_flagged")]
            ProblemFlagged = 11,

            /// <summary>
            /// Enum ProblemResolveRequested for value: problem_resolve_requested
            /// </summary>
            [EnumMember(Value = "problem_resolve_requested")]
            ProblemResolveRequested = 12,

            /// <summary>
            /// Enum ProblemEscalated for value: problem_escalated
            /// </summary>
            [EnumMember(Value = "problem_escalated")]
            ProblemEscalated = 13,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 14,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 15,

            /// <summary>
            /// Enum Refunded for value: refunded
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded = 16,

            /// <summary>
            /// Enum RefundPending for value: refund_pending
            /// </summary>
            [EnumMember(Value = "refund_pending")]
            RefundPending = 17,

            /// <summary>
            /// Enum RefundFlagged for value: refund_flagged
            /// </summary>
            [EnumMember(Value = "refund_flagged")]
            RefundFlagged = 18,

            /// <summary>
            /// Enum OffPlatformRefunded for value: off_platform_refunded
            /// </summary>
            [EnumMember(Value = "off_platform_refunded")]
            OffPlatformRefunded = 19,

            /// <summary>
            /// Enum PartialCompleted for value: partial_completed
            /// </summary>
            [EnumMember(Value = "partial_completed")]
            PartialCompleted = 20,

            /// <summary>
            /// Enum PartialPaid for value: partial_paid
            /// </summary>
            [EnumMember(Value = "partial_paid")]
            PartialPaid = 21,

            /// <summary>
            /// Enum OffPlatformChargedback for value: off_platform_chargedback
            /// </summary>
            [EnumMember(Value = "off_platform_chargedback")]
            OffPlatformChargedback = 22

        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_22000 for value: 22000
            /// </summary>
            NUMBER_22000 = 22000,

            /// <summary>
            /// Enum NUMBER_22100 for value: 22100
            /// </summary>
            NUMBER_22100 = 22100,

            /// <summary>
            /// Enum NUMBER_22110 for value: 22110
            /// </summary>
            NUMBER_22110 = 22110,

            /// <summary>
            /// Enum NUMBER_22150 for value: 22150
            /// </summary>
            NUMBER_22150 = 22150,

            /// <summary>
            /// Enum NUMBER_22175 for value: 22175
            /// </summary>
            NUMBER_22175 = 22175,

            /// <summary>
            /// Enum NUMBER_22180 for value: 22180
            /// </summary>
            NUMBER_22180 = 22180,

            /// <summary>
            /// Enum NUMBER_22195 for value: 22195
            /// </summary>
            NUMBER_22195 = 22195,

            /// <summary>
            /// Enum NUMBER_22190 for value: 22190
            /// </summary>
            NUMBER_22190 = 22190,

            /// <summary>
            /// Enum NUMBER_22200 for value: 22200
            /// </summary>
            NUMBER_22200 = 22200,

            /// <summary>
            /// Enum NUMBER_22300 for value: 22300
            /// </summary>
            NUMBER_22300 = 22300,

            /// <summary>
            /// Enum NUMBER_22400 for value: 22400
            /// </summary>
            NUMBER_22400 = 22400,

            /// <summary>
            /// Enum NUMBER_22410 for value: 22410
            /// </summary>
            NUMBER_22410 = 22410,

            /// <summary>
            /// Enum NUMBER_22420 for value: 22420
            /// </summary>
            NUMBER_22420 = 22420,

            /// <summary>
            /// Enum NUMBER_22500 for value: 22500
            /// </summary>
            NUMBER_22500 = 22500,

            /// <summary>
            /// Enum NUMBER_22575 for value: 22575
            /// </summary>
            NUMBER_22575 = 22575,

            /// <summary>
            /// Enum NUMBER_22600 for value: 22600
            /// </summary>
            NUMBER_22600 = 22600,

            /// <summary>
            /// Enum NUMBER_22610 for value: 22610
            /// </summary>
            NUMBER_22610 = 22610,

            /// <summary>
            /// Enum NUMBER_22650 for value: 22650
            /// </summary>
            NUMBER_22650 = 22650,

            /// <summary>
            /// Enum NUMBER_22670 for value: 22670
            /// </summary>
            NUMBER_22670 = 22670,

            /// <summary>
            /// Enum NUMBER_22700 for value: 22700
            /// </summary>
            NUMBER_22700 = 22700,

            /// <summary>
            /// Enum NUMBER_22800 for value: 22800
            /// </summary>
            NUMBER_22800 = 22800,

            /// <summary>
            /// Enum NUMBER_22680 for value: 22680
            /// </summary>
            NUMBER_22680 = 22680

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="paymentTypeId">paymentTypeId.</param>
        /// <param name="currency">currency.</param>
        /// <param name="buyerName">buyerName.</param>
        /// <param name="buyerEmail">buyerEmail.</param>
        /// <param name="buyerCountry">buyerCountry.</param>
        /// <param name="sellerName">sellerName.</param>
        /// <param name="sellerEmail">sellerEmail.</param>
        /// <param name="sellerCountry">sellerCountry.</param>
        /// <param name="tdsCheckState">tdsCheckState.</param>
        /// <param name="batchState">batchState.</param>
        /// <param name="invoiceUrl">invoiceUrl.</param>
        /// <param name="payoutDescriptor">payoutDescriptor.</param>
        /// <param name="remainingAmount">remainingAmount.</param>
        /// <param name="requestedReleaseAmount">requestedReleaseAmount.</param>
        /// <param name="customDescriptor">customDescriptor.</param>
        /// <param name="netAmount">netAmount.</param>
        /// <param name="chargedbackAmount">chargedbackAmount.</param>
        /// <param name="refundedAmount">refundedAmount.</param>
        /// <param name="releasedAmount">releasedAmount.</param>
        /// <param name="buyerFees">buyerFees.</param>
        /// <param name="sellerFees">sellerFees.</param>
        /// <param name="creditCardFee">creditCardFee.</param>
        /// <param name="paypalFee">paypalFee.</param>
        /// <param name="sellerUrl">sellerUrl.</param>
        /// <param name="buyerUrl">buyerUrl.</param>
        /// <param name="directDebitFee">directDebitFee.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="pendingReleaseAmount">pendingReleaseAmount.</param>
        /// <param name="dynamicDescriptor">dynamicDescriptor.</param>
        /// <param name="depositReference">depositReference.</param>
        /// <param name="promisepayFee">promisepayFee.</param>
        /// <param name="totalOutstanding">totalOutstanding.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="paymentCreditCardEnabled">paymentCreditCardEnabled.</param>
        /// <param name="paymentDirectDebitEnabled">paymentDirectDebitEnabled.</param>
        /// <param name="related">related.</param>
        /// <param name="links">links.</param>
        public Item(string id = default(string), string name = default(string), string description = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), StateEnum? state = default(StateEnum?), StatusEnum? status = default(StatusEnum?), int amount = default(int), int paymentTypeId = default(int), string currency = default(string), string buyerName = default(string), string buyerEmail = default(string), string buyerCountry = default(string), string sellerName = default(string), string sellerEmail = default(string), string sellerCountry = default(string), string tdsCheckState = default(string), string batchState = default(string), string invoiceUrl = default(string), string payoutDescriptor = default(string), int remainingAmount = default(int), int requestedReleaseAmount = default(int), string customDescriptor = default(string), int netAmount = default(int), int chargedbackAmount = default(int), int refundedAmount = default(int), int releasedAmount = default(int), int buyerFees = default(int), int sellerFees = default(int), int creditCardFee = default(int), int paypalFee = default(int), string sellerUrl = default(string), string buyerUrl = default(string), int directDebitFee = default(int), DateTime? dueDate = default(DateTime?), int pendingReleaseAmount = default(int), string dynamicDescriptor = default(string), string depositReference = default(string), int promisepayFee = default(int), int totalOutstanding = default(int), int totalAmount = default(int), string paymentMethod = default(string), bool paymentCreditCardEnabled = default(bool), bool paymentDirectDebitEnabled = default(bool), ItemRelated related = default(ItemRelated), ItemLinks links = default(ItemLinks))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Item and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Item and cannot be null");
            }
            this.Name = name;
            this.Amount = amount;
            this.Description = description;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.State = state;
            this.Status = status;
            this.PaymentTypeId = paymentTypeId;
            this.Currency = currency;
            this.BuyerName = buyerName;
            this.BuyerEmail = buyerEmail;
            this.BuyerCountry = buyerCountry;
            this.SellerName = sellerName;
            this.SellerEmail = sellerEmail;
            this.SellerCountry = sellerCountry;
            this.TdsCheckState = tdsCheckState;
            this.BatchState = batchState;
            this.InvoiceUrl = invoiceUrl;
            this.PayoutDescriptor = payoutDescriptor;
            this.RemainingAmount = remainingAmount;
            this.RequestedReleaseAmount = requestedReleaseAmount;
            this.CustomDescriptor = customDescriptor;
            this.NetAmount = netAmount;
            this.ChargedbackAmount = chargedbackAmount;
            this.RefundedAmount = refundedAmount;
            this.ReleasedAmount = releasedAmount;
            this.BuyerFees = buyerFees;
            this.SellerFees = sellerFees;
            this.CreditCardFee = creditCardFee;
            this.PaypalFee = paypalFee;
            this.SellerUrl = sellerUrl;
            this.BuyerUrl = buyerUrl;
            this.DirectDebitFee = directDebitFee;
            this.DueDate = dueDate;
            this.PendingReleaseAmount = pendingReleaseAmount;
            this.DynamicDescriptor = dynamicDescriptor;
            this.DepositReference = depositReference;
            this.PromisepayFee = promisepayFee;
            this.TotalOutstanding = totalOutstanding;
            this.TotalAmount = totalAmount;
            this.PaymentMethod = paymentMethod;
            this.PaymentCreditCardEnabled = paymentCreditCardEnabled;
            this.PaymentDirectDebitEnabled = paymentDirectDebitEnabled;
            this.Related = related;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTypeId
        /// </summary>
        [DataMember(Name = "payment_type_id", EmitDefaultValue = false)]
        public int PaymentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets BuyerName
        /// </summary>
        [DataMember(Name = "buyer_name", EmitDefaultValue = false)]
        public string BuyerName { get; set; }

        /// <summary>
        /// Gets or Sets BuyerEmail
        /// </summary>
        [DataMember(Name = "buyer_email", EmitDefaultValue = false)]
        public string BuyerEmail { get; set; }

        /// <summary>
        /// Gets or Sets BuyerCountry
        /// </summary>
        [DataMember(Name = "buyer_country", EmitDefaultValue = false)]
        public string BuyerCountry { get; set; }

        /// <summary>
        /// Gets or Sets SellerName
        /// </summary>
        [DataMember(Name = "seller_name", EmitDefaultValue = false)]
        public string SellerName { get; set; }

        /// <summary>
        /// Gets or Sets SellerEmail
        /// </summary>
        [DataMember(Name = "seller_email", EmitDefaultValue = false)]
        public string SellerEmail { get; set; }

        /// <summary>
        /// Gets or Sets SellerCountry
        /// </summary>
        [DataMember(Name = "seller_country", EmitDefaultValue = false)]
        public string SellerCountry { get; set; }

        /// <summary>
        /// Gets or Sets TdsCheckState
        /// </summary>
        [DataMember(Name = "tds_check_state", EmitDefaultValue = false)]
        public string TdsCheckState { get; set; }

        /// <summary>
        /// Gets or Sets BatchState
        /// </summary>
        [DataMember(Name = "batch_state", EmitDefaultValue = false)]
        public string BatchState { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceUrl
        /// </summary>
        [DataMember(Name = "invoice_url", EmitDefaultValue = false)]
        public string InvoiceUrl { get; set; }

        /// <summary>
        /// Gets or Sets PayoutDescriptor
        /// </summary>
        [DataMember(Name = "payout_descriptor", EmitDefaultValue = false)]
        public string PayoutDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets RemainingAmount
        /// </summary>
        [DataMember(Name = "remaining_amount", EmitDefaultValue = false)]
        public int RemainingAmount { get; set; }

        /// <summary>
        /// Gets or Sets RequestedReleaseAmount
        /// </summary>
        [DataMember(Name = "requested_release_amount", EmitDefaultValue = false)]
        public int RequestedReleaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets CustomDescriptor
        /// </summary>
        [DataMember(Name = "custom_descriptor", EmitDefaultValue = false)]
        public string CustomDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets NetAmount
        /// </summary>
        [DataMember(Name = "net_amount", EmitDefaultValue = false)]
        public int NetAmount { get; set; }

        /// <summary>
        /// Gets or Sets ChargedbackAmount
        /// </summary>
        [DataMember(Name = "chargedback_amount", EmitDefaultValue = false)]
        public int ChargedbackAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundedAmount
        /// </summary>
        [DataMember(Name = "refunded_amount", EmitDefaultValue = false)]
        public int RefundedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ReleasedAmount
        /// </summary>
        [DataMember(Name = "released_amount", EmitDefaultValue = false)]
        public int ReleasedAmount { get; set; }

        /// <summary>
        /// Gets or Sets BuyerFees
        /// </summary>
        [DataMember(Name = "buyer_fees", EmitDefaultValue = false)]
        public int BuyerFees { get; set; }

        /// <summary>
        /// Gets or Sets SellerFees
        /// </summary>
        [DataMember(Name = "seller_fees", EmitDefaultValue = false)]
        public int SellerFees { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardFee
        /// </summary>
        [DataMember(Name = "credit_card_fee", EmitDefaultValue = false)]
        public int CreditCardFee { get; set; }

        /// <summary>
        /// Gets or Sets PaypalFee
        /// </summary>
        [DataMember(Name = "paypal_fee", EmitDefaultValue = false)]
        public int PaypalFee { get; set; }

        /// <summary>
        /// Gets or Sets SellerUrl
        /// </summary>
        [DataMember(Name = "seller_url", EmitDefaultValue = false)]
        public string SellerUrl { get; set; }

        /// <summary>
        /// Gets or Sets BuyerUrl
        /// </summary>
        [DataMember(Name = "buyer_url", EmitDefaultValue = false)]
        public string BuyerUrl { get; set; }

        /// <summary>
        /// Gets or Sets DirectDebitFee
        /// </summary>
        [DataMember(Name = "direct_debit_fee", EmitDefaultValue = false)]
        public int DirectDebitFee { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets PendingReleaseAmount
        /// </summary>
        [DataMember(Name = "pending_release_amount", EmitDefaultValue = false)]
        public int PendingReleaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets DynamicDescriptor
        /// </summary>
        [DataMember(Name = "dynamic_descriptor", EmitDefaultValue = false)]
        public string DynamicDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DepositReference
        /// </summary>
        [DataMember(Name = "deposit_reference", EmitDefaultValue = false)]
        public string DepositReference { get; set; }

        /// <summary>
        /// Gets or Sets PromisepayFee
        /// </summary>
        [DataMember(Name = "promisepay_fee", EmitDefaultValue = false)]
        public int PromisepayFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalOutstanding
        /// </summary>
        [DataMember(Name = "total_outstanding", EmitDefaultValue = false)]
        public int TotalOutstanding { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public int TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCreditCardEnabled
        /// </summary>
        [DataMember(Name = "payment_credit_card_enabled", EmitDefaultValue = true)]
        public bool PaymentCreditCardEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDirectDebitEnabled
        /// </summary>
        [DataMember(Name = "payment_direct_debit_enabled", EmitDefaultValue = true)]
        public bool PaymentDirectDebitEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name = "related", EmitDefaultValue = false)]
        public ItemRelated Related { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public ItemLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentTypeId: ").Append(PaymentTypeId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BuyerName: ").Append(BuyerName).Append("\n");
            sb.Append("  BuyerEmail: ").Append(BuyerEmail).Append("\n");
            sb.Append("  BuyerCountry: ").Append(BuyerCountry).Append("\n");
            sb.Append("  SellerName: ").Append(SellerName).Append("\n");
            sb.Append("  SellerEmail: ").Append(SellerEmail).Append("\n");
            sb.Append("  SellerCountry: ").Append(SellerCountry).Append("\n");
            sb.Append("  TdsCheckState: ").Append(TdsCheckState).Append("\n");
            sb.Append("  BatchState: ").Append(BatchState).Append("\n");
            sb.Append("  InvoiceUrl: ").Append(InvoiceUrl).Append("\n");
            sb.Append("  PayoutDescriptor: ").Append(PayoutDescriptor).Append("\n");
            sb.Append("  RemainingAmount: ").Append(RemainingAmount).Append("\n");
            sb.Append("  RequestedReleaseAmount: ").Append(RequestedReleaseAmount).Append("\n");
            sb.Append("  CustomDescriptor: ").Append(CustomDescriptor).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  ChargedbackAmount: ").Append(ChargedbackAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  ReleasedAmount: ").Append(ReleasedAmount).Append("\n");
            sb.Append("  BuyerFees: ").Append(BuyerFees).Append("\n");
            sb.Append("  SellerFees: ").Append(SellerFees).Append("\n");
            sb.Append("  CreditCardFee: ").Append(CreditCardFee).Append("\n");
            sb.Append("  PaypalFee: ").Append(PaypalFee).Append("\n");
            sb.Append("  SellerUrl: ").Append(SellerUrl).Append("\n");
            sb.Append("  BuyerUrl: ").Append(BuyerUrl).Append("\n");
            sb.Append("  DirectDebitFee: ").Append(DirectDebitFee).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PendingReleaseAmount: ").Append(PendingReleaseAmount).Append("\n");
            sb.Append("  DynamicDescriptor: ").Append(DynamicDescriptor).Append("\n");
            sb.Append("  DepositReference: ").Append(DepositReference).Append("\n");
            sb.Append("  PromisepayFee: ").Append(PromisepayFee).Append("\n");
            sb.Append("  TotalOutstanding: ").Append(TotalOutstanding).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentCreditCardEnabled: ").Append(PaymentCreditCardEnabled).Append("\n");
            sb.Append("  PaymentDirectDebitEnabled: ").Append(PaymentDirectDebitEnabled).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.PaymentTypeId == input.PaymentTypeId ||
                    this.PaymentTypeId.Equals(input.PaymentTypeId)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.BuyerName == input.BuyerName ||
                    (this.BuyerName != null &&
                    this.BuyerName.Equals(input.BuyerName))
                ) && 
                (
                    this.BuyerEmail == input.BuyerEmail ||
                    (this.BuyerEmail != null &&
                    this.BuyerEmail.Equals(input.BuyerEmail))
                ) && 
                (
                    this.BuyerCountry == input.BuyerCountry ||
                    (this.BuyerCountry != null &&
                    this.BuyerCountry.Equals(input.BuyerCountry))
                ) && 
                (
                    this.SellerName == input.SellerName ||
                    (this.SellerName != null &&
                    this.SellerName.Equals(input.SellerName))
                ) && 
                (
                    this.SellerEmail == input.SellerEmail ||
                    (this.SellerEmail != null &&
                    this.SellerEmail.Equals(input.SellerEmail))
                ) && 
                (
                    this.SellerCountry == input.SellerCountry ||
                    (this.SellerCountry != null &&
                    this.SellerCountry.Equals(input.SellerCountry))
                ) && 
                (
                    this.TdsCheckState == input.TdsCheckState ||
                    (this.TdsCheckState != null &&
                    this.TdsCheckState.Equals(input.TdsCheckState))
                ) && 
                (
                    this.BatchState == input.BatchState ||
                    (this.BatchState != null &&
                    this.BatchState.Equals(input.BatchState))
                ) && 
                (
                    this.InvoiceUrl == input.InvoiceUrl ||
                    (this.InvoiceUrl != null &&
                    this.InvoiceUrl.Equals(input.InvoiceUrl))
                ) && 
                (
                    this.PayoutDescriptor == input.PayoutDescriptor ||
                    (this.PayoutDescriptor != null &&
                    this.PayoutDescriptor.Equals(input.PayoutDescriptor))
                ) && 
                (
                    this.RemainingAmount == input.RemainingAmount ||
                    this.RemainingAmount.Equals(input.RemainingAmount)
                ) && 
                (
                    this.RequestedReleaseAmount == input.RequestedReleaseAmount ||
                    this.RequestedReleaseAmount.Equals(input.RequestedReleaseAmount)
                ) && 
                (
                    this.CustomDescriptor == input.CustomDescriptor ||
                    (this.CustomDescriptor != null &&
                    this.CustomDescriptor.Equals(input.CustomDescriptor))
                ) && 
                (
                    this.NetAmount == input.NetAmount ||
                    this.NetAmount.Equals(input.NetAmount)
                ) && 
                (
                    this.ChargedbackAmount == input.ChargedbackAmount ||
                    this.ChargedbackAmount.Equals(input.ChargedbackAmount)
                ) && 
                (
                    this.RefundedAmount == input.RefundedAmount ||
                    this.RefundedAmount.Equals(input.RefundedAmount)
                ) && 
                (
                    this.ReleasedAmount == input.ReleasedAmount ||
                    this.ReleasedAmount.Equals(input.ReleasedAmount)
                ) && 
                (
                    this.BuyerFees == input.BuyerFees ||
                    this.BuyerFees.Equals(input.BuyerFees)
                ) && 
                (
                    this.SellerFees == input.SellerFees ||
                    this.SellerFees.Equals(input.SellerFees)
                ) && 
                (
                    this.CreditCardFee == input.CreditCardFee ||
                    this.CreditCardFee.Equals(input.CreditCardFee)
                ) && 
                (
                    this.PaypalFee == input.PaypalFee ||
                    this.PaypalFee.Equals(input.PaypalFee)
                ) && 
                (
                    this.SellerUrl == input.SellerUrl ||
                    (this.SellerUrl != null &&
                    this.SellerUrl.Equals(input.SellerUrl))
                ) && 
                (
                    this.BuyerUrl == input.BuyerUrl ||
                    (this.BuyerUrl != null &&
                    this.BuyerUrl.Equals(input.BuyerUrl))
                ) && 
                (
                    this.DirectDebitFee == input.DirectDebitFee ||
                    this.DirectDebitFee.Equals(input.DirectDebitFee)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.PendingReleaseAmount == input.PendingReleaseAmount ||
                    this.PendingReleaseAmount.Equals(input.PendingReleaseAmount)
                ) && 
                (
                    this.DynamicDescriptor == input.DynamicDescriptor ||
                    (this.DynamicDescriptor != null &&
                    this.DynamicDescriptor.Equals(input.DynamicDescriptor))
                ) && 
                (
                    this.DepositReference == input.DepositReference ||
                    (this.DepositReference != null &&
                    this.DepositReference.Equals(input.DepositReference))
                ) && 
                (
                    this.PromisepayFee == input.PromisepayFee ||
                    this.PromisepayFee.Equals(input.PromisepayFee)
                ) && 
                (
                    this.TotalOutstanding == input.TotalOutstanding ||
                    this.TotalOutstanding.Equals(input.TotalOutstanding)
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentCreditCardEnabled == input.PaymentCreditCardEnabled ||
                    this.PaymentCreditCardEnabled.Equals(input.PaymentCreditCardEnabled)
                ) && 
                (
                    this.PaymentDirectDebitEnabled == input.PaymentDirectDebitEnabled ||
                    this.PaymentDirectDebitEnabled.Equals(input.PaymentDirectDebitEnabled)
                ) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentTypeId.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.BuyerName != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerName.GetHashCode();
                }
                if (this.BuyerEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerEmail.GetHashCode();
                }
                if (this.BuyerCountry != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerCountry.GetHashCode();
                }
                if (this.SellerName != null)
                {
                    hashCode = (hashCode * 59) + this.SellerName.GetHashCode();
                }
                if (this.SellerEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SellerEmail.GetHashCode();
                }
                if (this.SellerCountry != null)
                {
                    hashCode = (hashCode * 59) + this.SellerCountry.GetHashCode();
                }
                if (this.TdsCheckState != null)
                {
                    hashCode = (hashCode * 59) + this.TdsCheckState.GetHashCode();
                }
                if (this.BatchState != null)
                {
                    hashCode = (hashCode * 59) + this.BatchState.GetHashCode();
                }
                if (this.InvoiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceUrl.GetHashCode();
                }
                if (this.PayoutDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemainingAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.RequestedReleaseAmount.GetHashCode();
                if (this.CustomDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDescriptor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NetAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ChargedbackAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.RefundedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ReleasedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyerFees.GetHashCode();
                hashCode = (hashCode * 59) + this.SellerFees.GetHashCode();
                hashCode = (hashCode * 59) + this.CreditCardFee.GetHashCode();
                hashCode = (hashCode * 59) + this.PaypalFee.GetHashCode();
                if (this.SellerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SellerUrl.GetHashCode();
                }
                if (this.BuyerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DirectDebitFee.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PendingReleaseAmount.GetHashCode();
                if (this.DynamicDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicDescriptor.GetHashCode();
                }
                if (this.DepositReference != null)
                {
                    hashCode = (hashCode * 59) + this.DepositReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PromisepayFee.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalOutstanding.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentCreditCardEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentDirectDebitEnabled.GetHashCode();
                if (this.Related != null)
                {
                    hashCode = (hashCode * 59) + this.Related.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
