/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// Callbacks
    /// </summary>
    [DataContract(Name = "callbacks")]
    public partial class Callbacks : IEquatable<Callbacks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Callbacks" /> class.
        /// </summary>
        /// <param name="callbacks">callbacks.</param>
        public Callbacks(List<Callback> callbacks = default(List<Callback>))
        {
            this._Callbacks = callbacks;
        }

        /// <summary>
        /// Gets or Sets _Callbacks
        /// </summary>
        [DataMember(Name = "callbacks", EmitDefaultValue = false)]
        public List<Callback> _Callbacks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Callbacks {\n");
            sb.Append("  _Callbacks: ").Append(_Callbacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Callbacks);
        }

        /// <summary>
        /// Returns true if Callbacks instances are equal
        /// </summary>
        /// <param name="input">Instance of Callbacks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Callbacks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Callbacks == input._Callbacks ||
                    this._Callbacks != null &&
                    input._Callbacks != null &&
                    this._Callbacks.SequenceEqual(input._Callbacks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Callbacks != null)
                {
                    hashCode = (hashCode * 59) + this._Callbacks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
