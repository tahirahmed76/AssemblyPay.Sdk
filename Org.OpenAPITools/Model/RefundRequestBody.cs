/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// RefundRequestBody
    /// </summary>
    [DataContract(Name = "refund_requestBody")]
    public partial class RefundRequestBody : IEquatable<RefundRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundRequestBody" /> class.
        /// </summary>
        /// <param name="refundAmount">For partial refunds, if they are enabled for marketplace..</param>
        /// <param name="refundMessage">Reason for the request..</param>
        /// <param name="accountId">The account id to be used to get the refunds from. This will need to be an account that has already been set up within Assembly.</param>
        public RefundRequestBody(int refundAmount = default(int), string refundMessage = default(string), string accountId = default(string))
        {
            this.RefundAmount = refundAmount;
            this.RefundMessage = refundMessage;
            this.AccountId = accountId;
        }

        /// <summary>
        /// For partial refunds, if they are enabled for marketplace.
        /// </summary>
        /// <value>For partial refunds, if they are enabled for marketplace.</value>
        [DataMember(Name = "refund_amount", EmitDefaultValue = false)]
        public int RefundAmount { get; set; }

        /// <summary>
        /// Reason for the request.
        /// </summary>
        /// <value>Reason for the request.</value>
        [DataMember(Name = "refund_message", EmitDefaultValue = false)]
        public string RefundMessage { get; set; }

        /// <summary>
        /// The account id to be used to get the refunds from. This will need to be an account that has already been set up within Assembly
        /// </summary>
        /// <value>The account id to be used to get the refunds from. This will need to be an account that has already been set up within Assembly</value>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RefundRequestBody {\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  RefundMessage: ").Append(RefundMessage).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundRequestBody);
        }

        /// <summary>
        /// Returns true if RefundRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefundAmount == input.RefundAmount ||
                    this.RefundAmount.Equals(input.RefundAmount)
                ) && 
                (
                    this.RefundMessage == input.RefundMessage ||
                    (this.RefundMessage != null &&
                    this.RefundMessage.Equals(input.RefundMessage))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                if (this.RefundMessage != null)
                {
                    hashCode = (hashCode * 59) + this.RefundMessage.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
