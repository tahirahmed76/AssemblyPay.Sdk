/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountIdRequestBody
    /// </summary>
    [DataContract(Name = "account_id_requestBody")]
    public partial class AccountIdRequestBody : IEquatable<AccountIdRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountIdRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountIdRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountIdRequestBody" /> class.
        /// </summary>
        /// <param name="accountId">Account id of the bank account/credit card, etc making payment (not user id) (required) (default to &quot;725cc8c0-759b-0138-5d6d-0a58a9feac05&quot;).</param>
        /// <param name="deviceId">Device Information for the device initiating the payment. This will need to be provided for card payments..</param>
        /// <param name="ipAddress">IP Information for the device initiating the payment. This will need to be provided for card payments..</param>
        /// <param name="cvv">CVV / CVC.</param>
        public AccountIdRequestBody(string accountId = "725cc8c0-759b-0138-5d6d-0a58a9feac05", string deviceId = default(string), string ipAddress = default(string), string cvv = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null) {
                throw new ArgumentNullException("accountId is a required property for AccountIdRequestBody and cannot be null");
            }
            this.AccountId = accountId;
            this.DeviceId = deviceId;
            this.IpAddress = ipAddress;
            this.Cvv = cvv;
        }

        /// <summary>
        /// Account id of the bank account/credit card, etc making payment (not user id)
        /// </summary>
        /// <value>Account id of the bank account/credit card, etc making payment (not user id)</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Device Information for the device initiating the payment. This will need to be provided for card payments.
        /// </summary>
        /// <value>Device Information for the device initiating the payment. This will need to be provided for card payments.</value>
        [DataMember(Name = "device_id", EmitDefaultValue = false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// IP Information for the device initiating the payment. This will need to be provided for card payments.
        /// </summary>
        /// <value>IP Information for the device initiating the payment. This will need to be provided for card payments.</value>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// CVV / CVC
        /// </summary>
        /// <value>CVV / CVC</value>
        [DataMember(Name = "cvv", EmitDefaultValue = false)]
        public string Cvv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountIdRequestBody {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Cvv: ").Append(Cvv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountIdRequestBody);
        }

        /// <summary>
        /// Returns true if AccountIdRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountIdRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountIdRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Cvv == input.Cvv ||
                    (this.Cvv != null &&
                    this.Cvv.Equals(input.Cvv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Cvv != null)
                {
                    hashCode = (hashCode * 59) + this.Cvv.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
