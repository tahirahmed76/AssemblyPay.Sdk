/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchTransactionAccountExternal
    /// </summary>
    [DataContract(Name = "batch_transaction_account_external")]
    public partial class BatchTransactionAccountExternal : IEquatable<BatchTransactionAccountExternal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchTransactionAccountExternal" /> class.
        /// </summary>
        /// <param name="accountTypeId">accountTypeId.</param>
        /// <param name="currency">currency.</param>
        public BatchTransactionAccountExternal(string accountTypeId = default(string), BatchTransactionAccountExternalCurrency currency = default(BatchTransactionAccountExternalCurrency))
        {
            this.AccountTypeId = accountTypeId;
            this.Currency = currency;
        }

        /// <summary>
        /// Gets or Sets AccountTypeId
        /// </summary>
        [DataMember(Name = "account_type_id", EmitDefaultValue = false)]
        public string AccountTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public BatchTransactionAccountExternalCurrency Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchTransactionAccountExternal {\n");
            sb.Append("  AccountTypeId: ").Append(AccountTypeId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchTransactionAccountExternal);
        }

        /// <summary>
        /// Returns true if BatchTransactionAccountExternal instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchTransactionAccountExternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchTransactionAccountExternal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountTypeId == input.AccountTypeId ||
                    (this.AccountTypeId != null &&
                    this.AccountTypeId.Equals(input.AccountTypeId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountTypeId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
