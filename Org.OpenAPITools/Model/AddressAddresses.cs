/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AddressAddresses
    /// </summary>
    [DataContract(Name = "address_addresses")]
    public partial class AddressAddresses : IEquatable<AddressAddresses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAddresses" /> class.
        /// </summary>
        /// <param name="addressline1">addressline1.</param>
        /// <param name="addressline2">addressline2.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="id">id.</param>
        /// <param name="country">country.</param>
        /// <param name="links">links.</param>
        public AddressAddresses(string addressline1 = default(string), string addressline2 = default(string), string postcode = default(string), string city = default(string), string state = default(string), string id = default(string), string country = default(string), AddressAddressesLinks links = default(AddressAddressesLinks))
        {
            this.Addressline1 = addressline1;
            this.Addressline2 = addressline2;
            this.Postcode = postcode;
            this.City = city;
            this.State = state;
            this.Id = id;
            this.Country = country;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Addressline1
        /// </summary>
        [DataMember(Name = "addressline1", EmitDefaultValue = false)]
        public string Addressline1 { get; set; }

        /// <summary>
        /// Gets or Sets Addressline2
        /// </summary>
        [DataMember(Name = "addressline2", EmitDefaultValue = false)]
        public string Addressline2 { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public AddressAddressesLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressAddresses {\n");
            sb.Append("  Addressline1: ").Append(Addressline1).Append("\n");
            sb.Append("  Addressline2: ").Append(Addressline2).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressAddresses);
        }

        /// <summary>
        /// Returns true if AddressAddresses instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressAddresses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressAddresses input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Addressline1 == input.Addressline1 ||
                    (this.Addressline1 != null &&
                    this.Addressline1.Equals(input.Addressline1))
                ) && 
                (
                    this.Addressline2 == input.Addressline2 ||
                    (this.Addressline2 != null &&
                    this.Addressline2.Equals(input.Addressline2))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addressline1 != null)
                {
                    hashCode = (hashCode * 59) + this.Addressline1.GetHashCode();
                }
                if (this.Addressline2 != null)
                {
                    hashCode = (hashCode * 59) + this.Addressline2.GetHashCode();
                }
                if (this.Postcode != null)
                {
                    hashCode = (hashCode * 59) + this.Postcode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
