/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Disbursement
    /// </summary>
    [DataContract(Name = "disbursement")]
    public partial class Disbursement : IEquatable<Disbursement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Disbursement" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="amount">amount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="cuscalPaymentTransactionId">cuscalPaymentTransactionId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="state">state.</param>
        /// <param name="to">to.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="bankAccountName">bankAccountName.</param>
        /// <param name="bankAccountNumber">bankAccountNumber.</param>
        /// <param name="bankRoutingNumber">bankRoutingNumber.</param>
        /// <param name="nppPayoutState">nppPayoutState.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="billerName">billerName.</param>
        /// <param name="billerCode">billerCode.</param>
        /// <param name="crn">crn.</param>
        /// <param name="links">links.</param>
        public Disbursement(string id = default(string), int amount = default(int), string currency = default(string), string batchId = default(string), string cuscalPaymentTransactionId = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string state = default(string), string to = default(string), string bankName = default(string), string bankAccountName = default(string), string bankAccountNumber = default(string), string bankRoutingNumber = default(string), string nppPayoutState = default(string), string accountName = default(string), string billerName = default(string), string billerCode = default(string), string crn = default(string), DisbursementLinks links = default(DisbursementLinks))
        {
            this.Id = id;
            this.Amount = amount;
            this.Currency = currency;
            this.BatchId = batchId;
            this.CuscalPaymentTransactionId = cuscalPaymentTransactionId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.State = state;
            this.To = to;
            this.BankName = bankName;
            this.BankAccountName = bankAccountName;
            this.BankAccountNumber = bankAccountNumber;
            this.BankRoutingNumber = bankRoutingNumber;
            this.NppPayoutState = nppPayoutState;
            this.AccountName = accountName;
            this.BillerName = billerName;
            this.BillerCode = billerCode;
            this.Crn = crn;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets CuscalPaymentTransactionId
        /// </summary>
        [DataMember(Name = "cuscal_payment_transaction_id", EmitDefaultValue = false)]
        public string CuscalPaymentTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bank_name", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountName
        /// </summary>
        [DataMember(Name = "bank_account_name", EmitDefaultValue = false)]
        public string BankAccountName { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name = "bank_account_number", EmitDefaultValue = false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankRoutingNumber
        /// </summary>
        [DataMember(Name = "bank_routing_number", EmitDefaultValue = false)]
        public string BankRoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets NppPayoutState
        /// </summary>
        [DataMember(Name = "npp_payout_state", EmitDefaultValue = false)]
        public string NppPayoutState { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name = "account_name", EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets BillerName
        /// </summary>
        [DataMember(Name = "biller_name", EmitDefaultValue = false)]
        public string BillerName { get; set; }

        /// <summary>
        /// Gets or Sets BillerCode
        /// </summary>
        [DataMember(Name = "biller_code", EmitDefaultValue = false)]
        public string BillerCode { get; set; }

        /// <summary>
        /// Gets or Sets Crn
        /// </summary>
        [DataMember(Name = "crn", EmitDefaultValue = false)]
        public string Crn { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public DisbursementLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Disbursement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CuscalPaymentTransactionId: ").Append(CuscalPaymentTransactionId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankRoutingNumber: ").Append(BankRoutingNumber).Append("\n");
            sb.Append("  NppPayoutState: ").Append(NppPayoutState).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  BillerName: ").Append(BillerName).Append("\n");
            sb.Append("  BillerCode: ").Append(BillerCode).Append("\n");
            sb.Append("  Crn: ").Append(Crn).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Disbursement);
        }

        /// <summary>
        /// Returns true if Disbursement instances are equal
        /// </summary>
        /// <param name="input">Instance of Disbursement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Disbursement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.CuscalPaymentTransactionId == input.CuscalPaymentTransactionId ||
                    (this.CuscalPaymentTransactionId != null &&
                    this.CuscalPaymentTransactionId.Equals(input.CuscalPaymentTransactionId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankAccountName == input.BankAccountName ||
                    (this.BankAccountName != null &&
                    this.BankAccountName.Equals(input.BankAccountName))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.BankRoutingNumber == input.BankRoutingNumber ||
                    (this.BankRoutingNumber != null &&
                    this.BankRoutingNumber.Equals(input.BankRoutingNumber))
                ) && 
                (
                    this.NppPayoutState == input.NppPayoutState ||
                    (this.NppPayoutState != null &&
                    this.NppPayoutState.Equals(input.NppPayoutState))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.BillerName == input.BillerName ||
                    (this.BillerName != null &&
                    this.BillerName.Equals(input.BillerName))
                ) && 
                (
                    this.BillerCode == input.BillerCode ||
                    (this.BillerCode != null &&
                    this.BillerCode.Equals(input.BillerCode))
                ) && 
                (
                    this.Crn == input.Crn ||
                    (this.Crn != null &&
                    this.Crn.Equals(input.Crn))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                if (this.CuscalPaymentTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.CuscalPaymentTransactionId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.BankAccountName != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountName.GetHashCode();
                }
                if (this.BankAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountNumber.GetHashCode();
                }
                if (this.BankRoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BankRoutingNumber.GetHashCode();
                }
                if (this.NppPayoutState != null)
                {
                    hashCode = (hashCode * 59) + this.NppPayoutState.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.BillerName != null)
                {
                    hashCode = (hashCode * 59) + this.BillerName.GetHashCode();
                }
                if (this.BillerCode != null)
                {
                    hashCode = (hashCode * 59) + this.BillerCode.GetHashCode();
                }
                if (this.Crn != null)
                {
                    hashCode = (hashCode * 59) + this.Crn.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
