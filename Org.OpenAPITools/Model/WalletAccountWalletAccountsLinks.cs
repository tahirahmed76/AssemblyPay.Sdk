/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletAccountWalletAccountsLinks
    /// </summary>
    [DataContract(Name = "wallet_account_wallet_accounts_links")]
    public partial class WalletAccountWalletAccountsLinks : IEquatable<WalletAccountWalletAccountsLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletAccountWalletAccountsLinks" /> class.
        /// </summary>
        /// <param name="self">self.</param>
        /// <param name="users">users.</param>
        /// <param name="batchTransactions">batchTransactions.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="bpayDetails">bpayDetails.</param>
        /// <param name="nppDetails">nppDetails.</param>
        /// <param name="virtualAccounts">virtualAccounts.</param>
        public WalletAccountWalletAccountsLinks(Object self = default(Object), Object users = default(Object), Object batchTransactions = default(Object), Object transactions = default(Object), Object bpayDetails = default(Object), Object nppDetails = default(Object), Object virtualAccounts = default(Object))
        {
            this.Self = self;
            this.Users = users;
            this.BatchTransactions = batchTransactions;
            this.Transactions = transactions;
            this.BpayDetails = bpayDetails;
            this.NppDetails = nppDetails;
            this.VirtualAccounts = virtualAccounts;
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public Object Self { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public Object Users { get; set; }

        /// <summary>
        /// Gets or Sets BatchTransactions
        /// </summary>
        [DataMember(Name = "batch_transactions", EmitDefaultValue = false)]
        public Object BatchTransactions { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public Object Transactions { get; set; }

        /// <summary>
        /// Gets or Sets BpayDetails
        /// </summary>
        [DataMember(Name = "bpay_details", EmitDefaultValue = false)]
        public Object BpayDetails { get; set; }

        /// <summary>
        /// Gets or Sets NppDetails
        /// </summary>
        [DataMember(Name = "npp_details", EmitDefaultValue = false)]
        public Object NppDetails { get; set; }

        /// <summary>
        /// Gets or Sets VirtualAccounts
        /// </summary>
        [DataMember(Name = "virtual_accounts", EmitDefaultValue = false)]
        public Object VirtualAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletAccountWalletAccountsLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  BatchTransactions: ").Append(BatchTransactions).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  BpayDetails: ").Append(BpayDetails).Append("\n");
            sb.Append("  NppDetails: ").Append(NppDetails).Append("\n");
            sb.Append("  VirtualAccounts: ").Append(VirtualAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletAccountWalletAccountsLinks);
        }

        /// <summary>
        /// Returns true if WalletAccountWalletAccountsLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletAccountWalletAccountsLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletAccountWalletAccountsLinks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.BatchTransactions == input.BatchTransactions ||
                    (this.BatchTransactions != null &&
                    this.BatchTransactions.Equals(input.BatchTransactions))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.BpayDetails == input.BpayDetails ||
                    (this.BpayDetails != null &&
                    this.BpayDetails.Equals(input.BpayDetails))
                ) && 
                (
                    this.NppDetails == input.NppDetails ||
                    (this.NppDetails != null &&
                    this.NppDetails.Equals(input.NppDetails))
                ) && 
                (
                    this.VirtualAccounts == input.VirtualAccounts ||
                    (this.VirtualAccounts != null &&
                    this.VirtualAccounts.Equals(input.VirtualAccounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                {
                    hashCode = (hashCode * 59) + this.Self.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                if (this.BatchTransactions != null)
                {
                    hashCode = (hashCode * 59) + this.BatchTransactions.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.BpayDetails != null)
                {
                    hashCode = (hashCode * 59) + this.BpayDetails.GetHashCode();
                }
                if (this.NppDetails != null)
                {
                    hashCode = (hashCode * 59) + this.NppDetails.GetHashCode();
                }
                if (this.VirtualAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.VirtualAccounts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
