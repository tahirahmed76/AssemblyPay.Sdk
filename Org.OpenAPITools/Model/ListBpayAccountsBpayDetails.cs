/*
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace AssemblyPay.Sdk.Model
{
    /// <summary>
    /// ListBpayAccountsBpayDetails
    /// </summary>
    [DataContract(Name = "list_bpay_accounts_bpay_details")]
    public partial class ListBpayAccountsBpayDetails : IEquatable<ListBpayAccountsBpayDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListBpayAccountsBpayDetails" /> class.
        /// </summary>
        /// <param name="accountName">Name assigned by the platform/marketplace to identify the account (similar to a nickname).</param>
        /// <param name="billerCode">billerCode.</param>
        /// <param name="billerName">Name of the biller as registered in BPay.</param>
        /// <param name="crn">crn.</param>
        public ListBpayAccountsBpayDetails(string accountName = default(string), int billerCode = default(int), string billerName = default(string), int crn = default(int))
        {
            this.AccountName = accountName;
            this.BillerCode = billerCode;
            this.BillerName = billerName;
            this.Crn = crn;
        }

        /// <summary>
        /// Name assigned by the platform/marketplace to identify the account (similar to a nickname)
        /// </summary>
        /// <value>Name assigned by the platform/marketplace to identify the account (similar to a nickname)</value>
        [DataMember(Name = "account_name", EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets BillerCode
        /// </summary>
        [DataMember(Name = "biller_code", EmitDefaultValue = false)]
        public int BillerCode { get; set; }

        /// <summary>
        /// Name of the biller as registered in BPay
        /// </summary>
        /// <value>Name of the biller as registered in BPay</value>
        [DataMember(Name = "biller_name", EmitDefaultValue = false)]
        public string BillerName { get; set; }

        /// <summary>
        /// Gets or Sets Crn
        /// </summary>
        [DataMember(Name = "crn", EmitDefaultValue = false)]
        public int Crn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListBpayAccountsBpayDetails {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  BillerCode: ").Append(BillerCode).Append("\n");
            sb.Append("  BillerName: ").Append(BillerName).Append("\n");
            sb.Append("  Crn: ").Append(Crn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListBpayAccountsBpayDetails);
        }

        /// <summary>
        /// Returns true if ListBpayAccountsBpayDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListBpayAccountsBpayDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListBpayAccountsBpayDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.BillerCode == input.BillerCode ||
                    this.BillerCode.Equals(input.BillerCode)
                ) && 
                (
                    this.BillerName == input.BillerName ||
                    (this.BillerName != null &&
                    this.BillerName.Equals(input.BillerName))
                ) && 
                (
                    this.Crn == input.Crn ||
                    this.Crn.Equals(input.Crn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BillerCode.GetHashCode();
                if (this.BillerName != null)
                {
                    hashCode = (hashCode * 59) + this.BillerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Crn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
